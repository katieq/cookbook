from django.shortcuts import render
from django.http import HttpResponse
from django.core.urlresolvers import reverse
from django.utils import timezone
from django.views.generic import ListView, DetailView
from django.views.generic.base import TemplateView
from django.views.generic.edit import CreateView, UpdateView, DeleteView
from django.core.urlresolvers import reverse_lazy
from cooklog.models import Dish, Chef, Recipe, Ingredient, Chef_Dish_Comments, ChefFollows, RecipeCategory, Bugs #Dish_Photo
#from cooklog.forms import ChefEntryForm
#from django.views.generic import CreateView
from cooklog.forms import NewDishShortForm, NewDishQuickForm, NewDishTodoForm, NewDishLongForm, NewCommentForm, CommentDeleteForm, NewRecipeForm, UpdateChefFollowsForm, NewLikeForm # UploadImageForm,
from cooklog.forms import RecipeChooseForm, NewDishTodoQuickForm
from cooklog.forms import UpdateDishForm, UpdateDishPhotoForm, UpdateDishMethodForm #, NewDishWeekTodoForm
from django import forms
from django.forms.formsets import formset_factory
from django.db.models import Count
from django.contrib.auth.models import User
from django.contrib.auth.decorators import login_required
from datetime import datetime
from datetime import timedelta
from django.db.models import Q
from functools import reduce
#from nltk.corpus import stopwords # <- used for "search match" of existing recipe name to dish name,
from stop_words import get_stop_words
import string
from dal import autocomplete
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.views.generic.edit import FormMixin
from itertools import chain

#from django.views.decorators.http import require_POST
#try:
#    from django.utils import simplejson as json
#except ImportError:
#    import json
import svgwrite

def generate_diagram_svg_data(pk):

    # need to access the dish's diagram.text in here!
    diagram_text = Dish.objects.filter(dish_id = pk).all()[0].dish_diagram_text
    # great, and now operate on that! develop it in my other project :) then shift function here.

    import svgwrite
    import re


    def get_utensil_path(utensil_name):
        # todo this will come from some saved text? e.g. a single file with a bunch of paths? or multiple files? not sure.
        return{'frying pan': """M1439,551 c-31,0,-50,24,-50,49 c0,27,22,50,50,50 c27,0,50,-20,50,-50 c0,-28,-21,-49,-50,-49 Z M1447,730 c-125,0,-250,-50,-375,-30 c-30,5,-30,0,-37,30 c-59,241,-277,420,-535,420 c-303,0,-550,-247,-550,-550 c0,-303,247,-550,550,-550 c258,0,476,179,535,420 c7,30,7,25,37,30 c125,20,250,-30,375,-30 c177,0,181,260,0,260 Z M1447,730""",
               'cast iron pan': """M1439,551 c-31,0,-50,24,-50,49 c0,27,22,50,50,50 c27,0,50,-20,50,-50 c0,-28,-21,-49,-50,-49 Z M1447,730 c-125,0,-250,-50,-375,-30 c-30,5,-30,0,-37,30 c-59,241,-277,420,-535,420 c-303,0,-550,-247,-550,-550 c0,-303,247,-550,550,-550 c258,0,476,179,535,420 c7,30,7,25,37,30 c125,20,250,-30,375,-30 c177,0,181,260,0,260 Z M1447,730""",
               'mixing bowl': """M95,28.748v3.176c0,1.17-0.948,2.118-2.118,2.118H92.83c-0.755,15.513-9.756,28.86-22.712,35.756v2.888  c0,1.17-0.949,2.118-2.119,2.118H32c-1.169,0-2.118-0.948-2.118-2.118v-2.888C16.926,62.902,7.925,49.556,7.17,34.042H7.118  C5.948,34.042,5,33.094,5,31.924v-3.176c0-1.169,0.948-2.118,2.118-2.118h85.764C94.052,26.63,95,27.579,95,28.748z""",
               'bowl': """M95,28.748v3.176c0,1.17-0.948,2.118-2.118,2.118H92.83c-0.755,15.513-9.756,28.86-22.712,35.756v2.888  c0,1.17-0.949,2.118-2.119,2.118H32c-1.169,0-2.118-0.948-2.118-2.118v-2.888C16.926,62.902,7.925,49.556,7.17,34.042H7.118  C5.948,34.042,5,33.094,5,31.924v-3.176c0-1.169,0.948-2.118,2.118-2.118h85.764C94.052,26.63,95,27.579,95,28.748z""",
               'large mixing bowl': """M95,28.748v3.176c0,1.17-0.948,2.118-2.118,2.118H92.83c-0.755,15.513-9.756,28.86-22.712,35.756v2.888  c0,1.17-0.949,2.118-2.119,2.118H32c-1.169,0-2.118-0.948-2.118-2.118v-2.888C16.926,62.902,7.925,49.556,7.17,34.042H7.118  C5.948,34.042,5,33.094,5,31.924v-3.176c0-1.169,0.948-2.118,2.118-2.118h85.764C94.052,26.63,95,27.579,95,28.748z""",
               'food processor': """M17,9.4V5h1V3h-5V2h-2v1H6v2h1v4.4c0,2.1,1.2,3.8,3,4.6v1H8.3c-0.4,0-0.8,0.3-0.9,0.7L6,19.8C5.9,20.4,6.4,21,7,21h0v1h2v-1  h6v1h2v-1c0.6,0,1.1-0.6,1-1.2l-1.4-4.1c-0.1-0.4-0.5-0.7-0.9-0.7H14v-1.1C15.8,13.2,17,11.4,17,9.4z M15,18c0,0.6-0.4,1-1,1  c-0.6,0-1-0.4-1-1c0-0.6,0.4-1,1-1C14.6,17,15,17.4,15,18z""",
               'saucepan': "M83.323,35.077l-3.285,3.67v-6.859h3.188v-3.477h-66.55v3.477h3.283v6.859l-3.283-3.67H6.631v6.47h10.046l3.283,3.766  v20.479c0,3.199,2.595,5.795,5.795,5.795h48.489c3.201,0,5.795-2.596,5.795-5.795V45.314l3.285-3.766h10.046v-6.47H83.323z",
               'oven': "M50,0 l1100,0 c50,0,50,0,50,50 l0,1100 c0,50,0,50,-50,50 l-1100,0 c-50,0,-50,0,-50,-50 l0,-1100 c0,-50,0,-50,50,-50 Z M301,230 c-51,0,-51,0,-51,51 l0,198 c0,51,0,51,51,51 l598,0 c51,0,51,0,51,-51 l0,-198 c0,-51,0,-51,-51,-51 Z M233,957 c-36,0,-62,26,-62,61 c0,37,29,62,62,62 c35,0,62,-29,62,-62 c0,-31,-24,-61,-62,-61 Z M0,750 l0,100 l1200,0 l0,-100 Z M472,955 c-35,1,-61,28,-62,63 c1,35,27,61,62,62 c36,-1,63,-27,63,-62 c0,-35,-27,-62,-63,-63 Z M728,955 c-36,1,-63,28,-63,63 c0,35,27,61,63,62 c35,-1,61,-27,62,-62 c-1,-35,-27,-62,-62,-63 Z M967,957 c-38,0,-62,30,-62,61 c0,33,27,62,62,62 c33,0,62,-25,62,-62 c0,-35,-26,-61,-62,-61 Z M967,957 ",
               'rolling pin': "M97.018,97.018c-3.031,3.031-5.805,5.172-11.853-0.876c-2.581-2.581-5.34-6.235-7.421-9.813l-5.227,5.228   c-0.904,0.903-2.368,0.903-3.271,0L8.444,30.755c-0.903-0.904-0.903-2.369,0-3.272l5.228-5.227   c-3.578-2.081-7.232-4.839-9.813-7.42C-2.189,8.787-0.048,6.014,2.983,2.983c3.031-3.031,5.804-5.172,11.852,0.876   c2.581,2.581,5.34,6.235,7.42,9.813l5.227-5.227c0.904-0.904,2.368-0.904,3.272,0l60.802,60.802c0.902,0.903,0.902,2.368,0,3.271   l-5.229,5.227c3.578,2.081,7.232,4.84,9.813,7.421C102.189,91.213,100.048,93.986,97.018,97.018z",
               'pie dish': "M5,44.6V46h0.9l5.5,13.3h0v1.4h77.3v-1.4L94.3,46h1.1v-1.4H5z M14.7,59.3L9.9,46h1.4l4.8,13.3H14.7z M20.4,59.3L17.1,46h1.4  l3.2,13.3H20.4z M26,59.3L24.3,46h1.3l1.8,13.3H26z M31.5,59.3l-1-13.3h1.4l0.8,13.3H31.5z M38.4,59.3H37V46h1.4V59.3z M44.7,59.3  h-1.3V46h1.3V59.3z M50.6,59.3h-1.1V46h1.1V59.3z M56.8,59.3h-1.2V46h1.2V59.3z M61.7,46h1.3v13.3h-1.3V46z M68.6,59.3h-1.2L68.3,46  h1.4L68.6,59.3z M74.2,59.3h-1.3L74.6,46h1.3L74.2,59.3z M79.7,59.3h-1.4L81.6,46H83L79.7,59.3z M85.4,59.3H84L88.8,46h1.4  L85.4,59.3z",
               'baking dish': "M82.634,39.488h-3.774v-1.582c2.605-0.024,4.72-2.15,4.72-4.761c0-2.625-2.14-4.762-4.765-4.762H11.185  c-2.627,0-4.762,2.136-4.762,4.762c0,2.611,2.112,4.737,4.718,4.761v1.582H7.364c-1.429,0-2.59,1.161-2.59,2.59  c0,1.429,1.161,2.59,2.59,2.59h3.776v8.382c0.022,4.724,3.881,8.565,8.604,8.565h50.511c4.724,0,8.582-3.842,8.604-8.574v-8.374  h3.773c1.432,0,2.592-1.161,2.592-2.59C85.227,40.649,84.064,39.488,82.634,39.488z M11.184,34.302c-0.638,0-1.157-0.52-1.157-1.156  c0-0.637,0.519-1.156,1.157-1.156h67.63c0.637,0,1.158,0.52,1.158,1.156s-0.521,1.156-1.158,1.156h-3.562v0.066H14.746v-0.066  H11.184z M70.255,58.011H19.744c-2.743,0-4.985-2.233-4.998-4.969V35.81h60.508v17.223C75.24,55.777,72.998,58.011,70.255,58.011z",
               'baking sheet': "M33.585,70.741C33.585,70.741,33.585,70.741,33.585,70.741c-2.987,0-5.368-0.757-5.468-0.789l-0.106-0.041    C9.845,61.669,4.525,53.867,1.969,50.118c-0.932-1.367-1.185-2.628-0.788-3.805c0.68-2.017,2.999-2.842,3.261-2.929    c2.195-0.777,54.187-19.173,56.667-20c0.84-0.28,1.829-0.422,2.939-0.422c1.831,0,3.387,0.384,3.452,0.4    c11.348,3.779,21.2,9.825,29.357,17.99l0.107,0.107c1.081,1.081,1.169,2.121,1.053,2.804c-0.338,1.977-2.723,3.174-2.993,3.304    c-0.583,0.234-52.126,20.719-56.586,22.37C37,70.471,35.367,70.741,33.585,70.741z M28.78,68.063    c0.338,0.101,2.368,0.678,4.805,0.678c0,0,0,0,0,0c1.544,0,2.943-0.229,4.159-0.679c4.438-1.645,55.958-22.119,56.479-22.326    c0.495-0.243,1.696-1.053,1.823-1.812c0.02-0.118,0.08-0.476-0.495-1.051l-0.107-0.107c-7.936-7.943-17.524-13.825-28.5-17.484    l0,0c-0.014,0-1.362-0.32-2.896-0.32c-0.896,0-1.672,0.107-2.307,0.319c-2.463,0.821-56.108,19.802-56.65,19.994    c-0.467,0.16-1.711,0.764-2.017,1.682c-0.183,0.549-0.011,1.215,0.51,1.979C6.072,52.586,11.17,60.062,28.78,68.063z",
               'wok': "M23,8.25c-0.05,0-0.1,0.007-0.147,0.022l-6.051,1.862C15.936,8.845,12.358,8.25,9,8.25c-2.357,0-4.818,0.294-6.379,0.914    L1.853,8.396c-0.195-0.195-0.512-0.195-0.707,0l-1,1c-0.168,0.168-0.195,0.433-0.063,0.631l1,1.5    c0.006,0.009,0.017,0.012,0.023,0.021c0.596,2.41,3.843,4.202,7.893,4.202c3.964,0,7.164-1.716,7.857-4.049L23,10.75    c0.561,0,1-0.549,1-1.25S23.561,8.25,23,8.25z M1.286,10.028L1.143,9.814L1.5,9.457l0.191,0.191    C1.526,9.766,1.395,9.894,1.286,10.028z M9,12.25c-4.618,0-7-1.051-7-1.5c0-0.449,2.382-1.5,7-1.5s7,1.051,7,1.5    C16,11.199,13.618,12.25,9,12.25z",
               'muffin tray': "M80.447,27.832c0-1.661-1.123-3.007-2.512-3.007H12.063c-1.388,0-2.513,1.346-2.513,3.007L3.697,55.034h82.604  L80.447,27.832z M44.999,30.041c4.506,0,8.157,1.721,8.157,3.845c0,2.125-3.651,3.847-8.157,3.847c-4.505,0-8.156-1.722-8.156-3.847  C36.843,31.762,40.494,30.041,44.999,30.041z M20.745,51.331c-5.056,0-9.151-1.93-9.151-4.312c0-2.384,4.096-4.314,9.151-4.314  c5.052,0,9.149,1.931,9.149,4.314C29.895,49.401,25.797,51.331,20.745,51.331z M23.375,37.732c-4.507,0-8.159-1.722-8.159-3.847  c0-2.124,3.652-3.845,8.159-3.845c4.503,0,8.155,1.721,8.155,3.845C31.53,36.011,27.878,37.732,23.375,37.732z M44.999,51.331  c-5.053,0-9.149-1.93-9.149-4.312c0-2.384,4.097-4.314,9.149-4.314s9.15,1.931,9.15,4.314  C54.149,49.401,50.052,51.331,44.999,51.331z M58.468,33.886c0-2.124,3.652-3.845,8.159-3.845c4.505,0,8.156,1.721,8.156,3.845  c0,2.125-3.651,3.847-8.156,3.847C62.12,37.732,58.468,36.011,58.468,33.886z M69.256,51.331c-5.054,0-9.149-1.93-9.149-4.312  c0-2.384,4.096-4.314,9.149-4.314c5.053,0,9.149,1.931,9.149,4.314C78.405,49.401,74.309,51.331,69.256,51.331z",
               'stand mixer': "M90.267,47.177c-0.331-0.322-0.785-0.53-1.286-0.53H66.774v-8.402c0.422-0.119,0.829-0.27,1.211-0.469  c1.69-0.845,2.949-2.402,3.42-4.273c2.363-0.575,4.482-1.776,6.151-3.445c1.258-1.239,2.279-2.743,2.951-4.426h1.977  c1.352,0,2.582-0.549,3.462-1.428c0.889-0.889,1.438-2.109,1.438-3.462c0-2.714-2.194-4.899-4.899-4.899h-1.977  C78.559,11,73.83,7.585,68.297,7.585H23.4c-1.069,0-2.109,0.123-3.102,0.369c-1.825,0.445-3.509,1.267-4.956,2.383  c-0.435,0.341-0.861,0.709-1.248,1.097c-2.374,2.383-3.849,5.665-3.849,9.307c0,6.195,4.284,11.387,10.054,12.778  c0.93,0.23,1.902,0.348,2.899,0.363l-0.024,0.006c0,0,0,4.389,0,11.927c0,11.889-3.518,26.303-5.552,31.609  c-2.346,6.138-8.418,9.609-8.418,9.609c0,1.192,0.388,2.289,1.04,3.178c0.17,0.218,0.35,0.435,0.539,0.624  c0.974,0.974,2.317,1.58,3.802,1.58h68.637c1.315,0,2.412-0.946,2.639-2.204c0.028-0.161,0.047-0.322,0.047-0.492  c0-0.738-0.303-1.419-0.785-1.901c-0.492-0.482-1.154-0.785-1.901-0.785h-8.495c0.69,0,1.249-0.558,1.249-1.249  c0-0.69-0.558-1.248-1.249-1.248h-0.454v-2.252c0.66-0.264,1.309-0.551,1.939-0.87c0.861-0.426,1.693-0.908,2.487-1.438  c2.242-1.485,4.218-3.339,5.855-5.457c3.159-4.105,5.032-9.25,5.032-14.83v-9.531c0.704-0.25,1.211-0.914,1.211-1.695  C90.797,47.962,90.589,47.508,90.267,47.177z M56.91,16.504c0.823,0,1.561,0.397,2.005,1.021c0.312,0.416,0.492,0.927,0.492,1.475  c0,1.381-1.125,2.497-2.497,2.497c-1.201,0-2.204-0.851-2.45-1.986c-0.028-0.161-0.047-0.331-0.047-0.511  C54.413,17.62,55.529,16.504,56.91,16.504z M44.255,16.504c1.248,0,2.289,0.917,2.469,2.119c0.019,0.123,0.028,0.246,0.028,0.378  c0,1.381-1.116,2.497-2.497,2.497c-1.145,0-2.109-0.776-2.393-1.825c-0.066-0.218-0.095-0.435-0.095-0.672  C41.767,17.62,42.883,16.504,44.255,16.504z M63.246,46.647H41c-1.003,0-1.807,0.813-1.807,1.816c0,0.492,0.199,0.946,0.53,1.277  c0.185,0.19,0.416,0.33,0.672,0.42v9.53c0,6.725,2.724,12.797,7.122,17.204c2.314,2.314,5.097,4.158,8.191,5.393v2.25h-0.454  c-0.69,0-1.248,0.558-1.248,1.248c0,0.69,0.558,1.249,1.248,1.249h-3.044c-8.399-7.415-12.305-15.861-13.998-20.789  c-0.794-2.298-1.163-4.719-1.163-7.15V42.542c0-4.665,4.07-7.313,7.167-8.654h14.507c0.67,2.113,2.376,3.763,4.524,4.359V46.647z",
               }.get(
            utensil_name, " M 0 0 L 10 5 L 0 10 z ")


    def get_utensil_scale(utensil_name):
        return{'frying pan': 0.035,
               'cast iron pan': .04,
               'mixing bowl': .4,
               'bowl': .4,
               'large mixing bowl': .5,
               'food processor': 1.7,
               'saucepan': .7,
               'oven': .025,
               'rolling pin': .4,
               'pie dish': .7,
               'baking dish': .7,
               'wok': 2,
               'muffin tray': .8,
               'stand mixer': .5,
               }.get(utensil_name, 1)


    def get_ingr_path(ingr_name):
        return{
            'eggs': "M76.827,28.042C67.207,5.262,50.697,5,49.999,5c-0.697,0-17.206,0.262-26.827,23.042   c-6.704,15.875-9.592,39.551-0.088,54.015C28.728,90.646,37.783,95,49.999,95c12.217,0,21.273-4.354,26.916-12.943   C86.419,67.592,83.532,43.917,76.827,28.042z M28.855,63.764c-0.708-2.608-1.043-5.547-0.994-8.733l3.886,0.059   c-0.042,2.819,0.246,5.391,0.858,7.643L28.855,63.764z M32.111,50.255l-3.854-0.51c1.717-13.154,4.789-19.381,9.86-26.27   l3.122,2.33C36.451,32.31,33.726,37.876,32.111,50.255z",
            'butternut pumpkin': "M73.56,73.419c0-5.073-1.603-9.905-4.639-13.997c-0.068-0.153-0.166-0.291-0.285-0.406  c-1.222-1.643-1.865-3.566-1.865-5.575l-0.009-1.169c-0.032-4.14-0.132-16.738,0.009-24.218c0-6.94-5.629-12.595-12.613-12.776  V8.948c0-0.715-0.58-1.295-1.296-1.295h-7.673c-0.411,0-0.797,0.194-1.041,0.524c-0.244,0.33-0.318,0.756-0.198,1.149l1.825,5.996  c-6.81,0.613-12.545,6.297-12.545,12.756c0.139,7.457,0.041,20.055,0.008,24.194l-0.008,1.169c0,2.067-0.682,4.045-1.973,5.719  c-0.044,0.058-0.083,0.118-0.116,0.182c-3.075,4.109-4.699,8.973-4.699,14.078c0,11.85,8.807,18.926,23.559,18.929  c0.838,0,1.651-0.03,2.45-0.075c0.134,0.045,0.271,0.075,0.412,0.075c0.197,0,0.39-0.063,0.573-0.154  C66.1,91.156,73.56,84.313,73.56,73.419z M51.565,10.244v5.017h-3.102l-1.527-5.017H51.565z M56.083,89.249  c1.752-2.637,3.762-7.214,3.47-14.189c-0.03-0.716-0.642-1.24-1.35-1.24c-0.715,0.03-1.27,0.635-1.24,1.35  c0.373,8.878-3.288,13.284-4.517,14.506c-0.899,0.059-1.729,0.081-2.446,0.081l-0.001,1.296v-1.296  c-6.304-0.001-20.967-1.595-20.967-16.337c0-4.606,1.487-8.992,4.301-12.684c0.042-0.056,0.08-0.114,0.112-0.175  c1.554-2.093,2.375-4.55,2.375-7.12l0.008-1.148c0.033-4.148,0.131-16.772-0.008-24.239c0-3.41,2.055-6.556,5.055-8.428  c-0.544,1.581-0.764,3.682-0.764,6.477c0,0.801,0.014,1.66,0.028,2.561c0.012,0.742,0.024,1.513,0.03,2.303  c0.004,0.712,0.583,1.287,1.295,1.287c0.003,0,0.006,0,0.009,0c0.715-0.005,1.292-0.588,1.287-1.304  c-0.005-0.799-0.018-1.578-0.03-2.327c-0.014-0.886-0.028-1.731-0.028-2.52c0-7.422,1.653-7.791,4.395-8.251H47.5  c0.001,0,0.002,0,0.003,0s0.002,0,0.003,0h6.309c5.715,0,10.363,4.577,10.364,10.178c-0.141,7.491-0.042,20.115-0.009,24.263  l0.008,1.148c0,2.569,0.82,5.025,2.374,7.118c0.033,0.062,0.071,0.121,0.114,0.177c2.813,3.69,4.301,8.076,4.301,12.684  C70.968,84.396,62.838,88.082,56.083,89.249z",
            # 'butter': "",
            # 'flour': "", # got a cool wheat grain, but it was very slow. perhaps wouldn't be in practice though?
            'chard': "M43.66,36.18c3.58-4.79-1-12.39,2.31-17.44,1-1.62.69-3.81-.09-5.57S44,9.71,43.63,7.8c-.29-1.5-.26-3.29-1.5-4.19-1.59-1.15-3.75.26-5.11,1.67a44.71,44.71,0,0,0-5.95,7.62c-.43-2.4-.87-4.76-1.3-7.13a5.27,5.27,0,0,0-.61-1.91,3.59,3.59,0,0,0-4.42-1,10.7,10.7,0,0,0-3.61,3.23L13,.47A2.35,2.35,0,0,0,12,0c-.84-.09-1.5.84-1.44,1.67a4.17,4.17,0,0,0,1,2.22,5,5,0,0,0-5.2,1.21A15.09,15.09,0,0,0,3.38,9.79c-.66,1.41-1.33,3.12-.61,4.5,1,1.91-.32,4.19-1.47,6s-2,4.53-.4,6,1.33,4.36.49,6.55S-.48,37.51.5,39.65c.9,1.91,3.26,3.06,3.46,5.14C4.11,46.32,3,47.61,2.35,49A9.09,9.09,0,0,0,4.63,59.86a20.35,20.35,0,0,1,6.32,8.89c1.59,4.39.32,9.24-1,13.71a7.08,7.08,0,0,0-.49,3.35,2.52,2.52,0,0,0,2.19,2.25c1.7.06,3.18,1.21,4.82,1.73s4,0,4.1-1.73c.14-1.33-1.18-2.63-.69-3.84a18.07,18.07,0,0,0-.35-13.77c1.15-2.14,4.71-1.62,6,.43s1,4.73.32,7c-.55,1.82-1.3,3.67-1,5.51s2,3.7,3.87,3.18c3.18-1,2-6.93,5.2-7.94-.06,2.11-.06,4.33,1.1,6.09s3.9,2.54,5.34,1,.66-3.7-.06-5.51C39,77,37.71,73.74,36.41,70.48a57.67,57.67,0,0,0,9.15-15c1.3-3.12-.23-6.61-1.53-9.7S41.64,38.9,43.66,36.18Zm-13-22.49a7.38,7.38,0,0,1,0,6.81c-.29-1.21-1-2.34-1.24-3.58S29.51,14.15,30.7,13.69ZM21,10.92c-.69-.89.09-2.19,1-2.8s2.14-1,2.71-1.91c.32-.49.43-1.1.72-1.59s1-.92,1.47-.64a20.19,20.19,0,0,0,1.79,7.68c-2.45,3-.26,7.42-.69,11.26-.32,2.83-2.14,5.43-1.79,8.26a25.38,25.38,0,0,0,1.24,4,4.3,4.3,0,0,1-.35,4,24.22,24.22,0,0,0-4.76,9.93c-2.43-4,2.37-9,1.41-13.6-.4-2-2-4-1.53-6A36.93,36.93,0,0,0,23,17.93c-.4-.38-1,.32-1.07.87a44.18,44.18,0,0,0-.84,10.48c-1.18.78-2.66-.87-2.6-2.31s.87-2.77.84-4.19c-.09-2.14-2-4.13-1.3-6.12.4-1.1,1.47-1.79,2.31-2.63S21.75,11.81,21,10.92ZM13.37,3.56c.84,1.24,2.51,1.47,3.93,2s2.8,2,2.14,3.32a3.79,3.79,0,0,0,0,2.4,2.12,2.12,0,0,1-.61,2.22c-1.79-.72-1.18-3.52-2.4-5-.14-.2-.55-.35-.64-.09-.4,1.79.87,3.49,1.13,5.28a5,5,0,0,1-1,3.75c-.75.2-1.5-.58-1.62-1.36a7.26,7.26,0,0,1,.32-2.34,7.29,7.29,0,0,0-.2-3.61c-.35-1.13-1-2.14-1.3-3.23A3.88,3.88,0,0,1,13.37,3.56Zm0,81.73a1.58,1.58,0,0,1-.78,1.21,1.09,1.09,0,0,1-1.27-.64,2.62,2.62,0,0,1-.12-1.56,13.47,13.47,0,0,1,1.59-4.65A9.2,9.2,0,0,1,13.4,85.29Zm3.41-18.54a28.1,28.1,0,0,1,.35-12.59,3.76,3.76,0,0,0-2.77,3,11.25,11.25,0,0,0,.23,4.27Q17,74.7,18.22,88.06c-.75.89-2-.52-2.25-1.65a99.15,99.15,0,0,1-2.4-17.21c-.26-5.51-.29-11.64-4-15.73a3.23,3.23,0,0,0-2.08-4.56,6.29,6.29,0,0,0,.72,2.89c-.55-.09-1,.61-.87,1.15a3.11,3.11,0,0,0,.92,1.41A14.89,14.89,0,0,1,11.9,67.1a22.64,22.64,0,0,0-7-10.34c-1.53-1.3-1.59-3.67-1-5.6s1.76-3.64,2.25-5.57,0-4.39-1.79-5.28c-2.4-1.21-2-4.76-1-7.25s2-5.72.06-7.56c-1.44-1.39-.72-3.84.32-5.54s2.34-3.64,1.73-5.54c-.92-3,1.24-5.95,3.29-8.29a7.8,7.8,0,0,1,3.72,9c-.69,2.17,2.54,3.32,3.78,5.23,1.79,2.71-.69,7,1.53,9.38a23.93,23.93,0,0,0,2.22,1.59c2.63,2.14,2,6.24,1,9.44s-1.93,7.16.38,9.59a9.87,9.87,0,0,1-4.68,16.43Zm6.27-2.19c.06-.49.84-.35,1.24-.06.87.61,1.7,1.27,2.54,2a4,4,0,0,1,1.24,1.44,1.52,1.52,0,0,1-.32,1.79A10.85,10.85,0,0,1,23.07,64.56ZM39,84a1,1,0,0,1,.06.4c0,.58-.84.81-1.36.52a2.69,2.69,0,0,1-.89-1.44c-.4-1.21-.84-2.43-1.24-3.64-.78-2.22-1.53-4.42-2.28-6.61a4.25,4.25,0,0,1-.38-2,1.51,1.51,0,0,1,1.18-1.41A117.07,117.07,0,0,1,39,84Zm3.64-28.64c-.84,1.39-2.31,2.25-3.18,3.61-1,1.59-1.1,3.61-1.73,5.4s-2.25,3.58-4.1,3.12c.84-2,.72-4.19,1-6.29a16.19,16.19,0,0,1,4.22-8.92c-2.51.78-4.27,3.09-5.17,5.57a30.29,30.29,0,0,0-1.24,7.74,100.16,100.16,0,0,1-3.06,17.06c-.32,1.15-1.56,2.54-2.34,1.65a1.77,1.77,0,0,1-.14-1.44c1.44-7.56,2.92-15.16,4.36-22.72A13.66,13.66,0,0,0,26.42,47c.35.84.66,1.65,1,2.48a33.64,33.64,0,0,1,2.48,8.31,11.28,11.28,0,0,1-2,8.29L25,63c1.79-2.25,1.39-5.49.61-8.23s-1.82-5.66-1-8.4c1-3.15,4.27-5.28,4.82-8.52s-1.67-6.26-1.1-9.41c.64-3.61,4.73-5.86,5.28-9.5.35-2.4-.92-5.11.38-7.16C35.11,10,37.8,9.5,38.61,7.54c.32-.69.32-1.53.81-2.11s1.76-.4,1.67.35c-.4,4.59,4.39,9,2.57,13.25-.43,1-1.15,1.79-1.56,2.8C41,24.75,43.26,28,42.94,31.1S40,36.41,39.56,39.39c-.43,2.77,1.1,5.43,2.34,7.94S44.09,53,42.68,55.35Z",
            'garlic': "M84.8,57.3C82.7,50.4,71.3,38.1,62,29c-2.2-2.2-2.9-5.6-1.8-8.6l2-5.4l-5.4-2.1L55,17.8c-1.2-2.4-2-4.1-2.4-4.8h-5.2   c-0.3,0.7-1.2,2.4-2.4,4.8l-1.9-4.9L37.8,15l2,5.4c1.1,3,0.4,6.5-1.8,8.6c-9.3,9.1-20.7,21.4-22.8,28.3   C12,68.2,17.8,79.8,28.1,83.2c2,0.6,4,1,6,1c2,0,4-0.3,5.9-1c3,1.9,6.4,3,10,3c3.6,0,7-1.1,10-3c1.9,0.6,3.9,1,5.9,1c2,0,4-0.3,6-1   C82.2,79.8,88,68.2,84.8,57.3z M65.2,78.4c3.4-4.4,5.6-10.2,5.6-16.7c0-4.9-2.7-13.2-5.9-21.6c8.1,8.6,13.3,15.4,14.3,18.8   c2.3,7.9-1.8,16.3-9.2,18.8C68.5,78.3,66.8,78.5,65.2,78.4z M50,80.4c-1.3,0-2.6-0.2-3.8-0.6c-1-0.3-2-0.8-3-1.4   c-0.9-0.5-1.7-1.2-2.4-1.9c-3.5-3.4-5.8-8.8-5.8-14.8c0-5.5,4.6-17.5,9.3-28.3c2-4.6,4-8.9,5.7-12.5c1.7,3.6,3.7,7.9,5.7,12.5   C60.4,44.2,65,56.2,65,61.7c0,6-2.3,11.4-5.8,14.8c-0.8,0.7-1.6,1.4-2.4,1.9c-0.9,0.6-1.9,1.1-3,1.4C52.6,80.2,51.3,80.4,50,80.4z    M30,77.7c-7.4-2.5-11.5-10.9-9.2-18.8c1-3.4,6.2-10.2,14.3-18.8c-3.3,8.3-5.9,16.6-5.9,21.6c0,6.4,2.1,12.3,5.6,16.7   C33.2,78.5,31.5,78.3,30,77.7z",
            'olive oil': "M58.24,23.61a5.13,5.13,0,0,1-1.53-1.51,4.81,4.81,0,0,1-.8-2.65V13.17h.19a1.1,1.1,0,0,0,1.1-1.1V3.42a1.57,1.57,0,0,0-1.57-1.57H44.35a1.57,1.57,0,0,0-1.57,1.57v8.65a1.1,1.1,0,0,0,1.1,1.1h.19v6.27a4.81,4.81,0,0,1-.8,2.65,5.13,5.13,0,0,1-1.53,1.51,7.34,7.34,0,0,0-3.4,6.21V95A2.91,2.91,0,0,0,41.27,98H58.73A2.91,2.91,0,0,0,61.64,95V29.82A7.34,7.34,0,0,0,58.24,23.61ZM45,4.06H55V11H45ZM59.44,95a.7.7,0,0,1-.7.7H41.27a.7.7,0,0,1-.7-.7V29.82a5.14,5.14,0,0,1,2.38-4.35,7.32,7.32,0,0,0,2.19-2.16,7,7,0,0,0,1.16-3.87V13.17h7.42v6.27a7,7,0,0,0,1.16,3.87,7.32,7.32,0,0,0,2.19,2.16,5.14,5.14,0,0,1,2.38,4.35Z",
            'lemon': "M69.933,13.475c-0.18-6.033-2.219-5.786-6.776-2.756c-1.833,1.218-3.498,1.462-5.473,1.438   c-11.686-0.141-21.306,4.645-29.495,12.627c-1.198,1.168-2.48,2.372-3.247,3.972c-0.441,0.919-0.867,1.841-1.277,2.766   c-2.807,6.329-4.842,12.822-5.383,19.949c-0.215,2.83-0.063,5.528,0.357,8.133c1.052,6.517,3.839,12.437,7.152,18.286   c1.385,2.444,2.931,4.649,2.204,7.835c-0.666,2.919,0.946,4.734,3.872,5.405c2.652,0.608,4.296-0.861,5.586-2.808   c0.648-0.978,1.404-2.266,2.394-2.12c2.32,0.342,4.315-0.816,6.531-0.892c4.22-0.144,8.335-1.129,12.288-2.578   c4.548-1.668,7.949-4.925,11.179-8.438c2.548-2.771,4.731-5.689,6.529-8.767c1.319-2.258,2.425-4.604,3.303-7.046   c1.464-4.072,2.302-8.407,2.421-13.051c0.287-7.611-1.893-14.354-6.005-20.729C73.807,21.151,70.082,18.462,69.933,13.475z    M28.099,72.051c-0.715,0.343-1.524,0.185-1.876-0.343c-0.991-1.49-1.742-3.148-1.421-5.003c0.126-0.729,0.583-1.449,1.539-1.466   c0.773-0.014,1.252,0.335,1.515,1.09c0.444,1.276,0.958,2.527,1.367,3.59C29.097,70.954,28.894,71.669,28.099,72.051z    M31.204,69.698c-1.806-0.281-1.949-2.135-2.304-3.554c-0.309-1.235,0.618-1.738,1.673-1.677c1.958,0.113,1.854,1.896,2.321,2.829   C33.058,68.919,32.217,69.856,31.204,69.698z M54.713,26.209c-0.085,0.87-0.731,1.459-1.613,1.282   c-1.704-0.341-0.9-1.91-1.269-3.067c-0.524,0.417-0.936,0.836-1.429,1.106c-0.349,0.192-0.826,0.298-1.215,0.24   c-0.735-0.111-1.044-0.882-0.881-1.364c0.457-1.353,1.2-2.642,2.536-3.291c0.711-0.345,1.386,0.142,1.433,0.986   c0.057,1.02,0.47,1.41,1.509,1.588C55.29,23.948,54.806,25.258,54.713,26.209z", #></path><path d="M53.783,23.69c-1.039-0.178-1.452-0.568-1.509-1.588c-0.047-0.844-0.721-1.331-1.433-0.986   c-1.336,0.649-2.079,1.938-2.536,3.291c-0.163,0.482,0.147,1.254,0.881,1.364c0.389,0.059,0.866-0.048,1.215-0.24   c0.493-0.271,0.905-0.689,1.429-1.106c0.369,1.157-0.435,2.726,1.269,3.067c0.882,0.177,1.527-0.412,1.613-1.282   C54.806,25.258,55.29,23.948,53.783,23.69z"></path><path d="M26.341,65.239c-0.956,0.017-1.413,0.737-1.539,1.466c-0.321,1.855,0.431,3.514,1.421,5.003   c0.351,0.528,1.16,0.686,1.876,0.343c0.795-0.382,0.998-1.097,1.124-2.132c-0.408-1.063-0.923-2.314-1.367-3.59   C27.593,65.574,27.114,65.225,26.341,65.239z"></path><path d="M30.573,64.467c-1.054-0.061-1.981,0.442-1.673,1.677c0.355,1.42,0.498,3.273,2.304,3.554   c1.013,0.157,1.854-0.78,1.69-2.403C32.427,66.363,32.531,64.58,30.573,64.467z"></path><path d="M85.533,39.231l-0.71-3.736c-1.231-6.255-4.374-11.724-8.328-16.538c-2.011-2.449-2.894-4.785-3.281-7.746   c-0.566-4.334-3.736-8.204-9.348-5.073c-1.626,0.908-3.003,2.617-5.091,2.54c-2.057-0.075-4.074,0.062-6.127,0.247   c-10.387,0.933-18.937,5.661-26.365,12.624c-2.498,2.342-4.629,5.087-5.774,8.453c-3.66,6.109-7.886,21.833-5.542,29.224   l1.152,5.258c1.988,5.012,3.321,10.315,6.488,14.812c1.564,2.22,2.701,4.493,2.051,7.417c-0.404,1.818,0.497,3.479,1.451,5.096   c1.13,1.917,3.446,1.772,4.844,3.048L34.578,95c1.992-1.296,4.079-2.241,5.232-4.323c0.314-0.568,0.932-0.838,1.529-0.858   c3.192-0.106,6.222-1.186,9.413-1.425c4.312-0.322,8.44-1.562,12.212-3.787c7.62-4.496,13.134-10.942,17.209-18.693l2.943-5.781   C85.563,53.25,86.024,46.328,85.533,39.231z M82.099,45.427c-0.119,4.644-0.957,8.979-2.421,13.051   c-0.878,2.442-1.984,4.788-3.303,7.046c-1.798,3.078-3.981,5.996-6.529,8.767c-3.23,3.513-6.631,6.771-11.179,8.438   c-3.953,1.449-8.068,2.435-12.288,2.578c-2.216,0.076-4.211,1.233-6.531,0.892c-0.99-0.146-1.746,1.143-2.394,2.12   c-1.29,1.947-2.934,3.416-5.586,2.808c-2.926-0.671-4.538-2.486-3.872-5.405c0.727-3.185-0.819-5.391-2.204-7.835   c-3.313-5.848-6.1-11.769-7.152-18.286c-0.421-2.605-0.573-5.302-0.357-8.133c0.542-7.127,2.576-13.62,5.383-19.949   c0.41-0.925,0.836-1.846,1.277-2.766c0.768-1.6,2.049-2.804,3.247-3.972c8.189-7.982,17.808-12.768,29.495-12.627   c1.975,0.024,3.64-0.22,5.473-1.438c4.557-3.029,6.596-3.277,6.776,2.756c0.149,4.987,3.873,7.676,6.161,11.223   C80.206,31.073,82.387,37.815,82.099,45.427z",
            'feta': "M90.3813477,22.8222656c-0.0006104-0.02948-0.0083618-0.0568237-0.0106812-0.0858154   c-0.0012207-0.015625,0.0040894-0.0303345,0.0023804-0.0460205c-0.0020752-0.019104-0.012085-0.0352783-0.0148315-0.0541992   c-0.0194092-0.1294556-0.0507812-0.2545776-0.1016846-0.3707886c-0.0158081-0.0369873-0.0368042-0.0696411-0.0554199-0.1050415   c-0.0447388-0.083252-0.0961914-0.1613159-0.1551514-0.234314c-0.0377808-0.0474854-0.0750122-0.0926514-0.1182251-0.1352539   c-0.0773315-0.0756836-0.1615601-0.1438599-0.2529907-0.2018433c-0.0480347-0.0302124-0.0985718-0.0531616-0.1502075-0.0778809   c-0.0892944-0.0437622-0.1821289-0.0784302-0.2791138-0.1039429c-0.0247803-0.0062866-0.0453491-0.0213013-0.0706177-0.0263062   c-1.0849609-0.2163086-26.6416016-5.3046875-32.3974609-6.0849609c-4.3432617-0.5888672-10.2182617-2.409668-12.5424805-3.1645508   c-1.0927734-0.355957-2.25-0.3598633-3.3457031-0.012207c-3.9501953,1.2524414-13.5380859,4.3481445-17.2431641,6.0395508   c-4.3710938,1.9956055-12.7724609,4.706543-12.8569336,4.7338867c-0.0139771,0.0045166-0.024292,0.0147095-0.0380859,0.0195923   c-0.1242676,0.0444336-0.2398071,0.1051025-0.3470459,0.1787109c-0.0355835,0.0244751-0.0679932,0.0502319-0.1010742,0.0775146   c-0.1015015,0.0828857-0.1952515,0.1743774-0.2721558,0.2808228c-0.0126343,0.0175781-0.020874,0.0371704-0.0326538,0.0552979   c-0.069397,0.1052246-0.1237183,0.2200317-0.164856,0.34198c-0.0084229,0.0251465-0.0188599,0.048584-0.026001,0.0742798   c-0.03125,0.1121216-0.0536499,0.2280273-0.0576782,0.3497314c-0.0283203,0.8432617-0.6806641,20.7338867,0.0068359,27.4155273   c0.0654297,0.6362305,0.5268555,1.1606445,1.1494141,1.3071289c0.208313,0.0490112,19.4515381,4.5744019,26.7628784,6.8977661   c-8.555542,2.800354-18.0949097,5.835144-18.3148804,5.9050293c-0.1516113,0.0469971-0.2905884,0.1199951-0.4178467,0.2107544   c-0.0123901,0.0087891-0.024353,0.0171509-0.036438,0.0262451c-0.1167603,0.0886841-0.2213135,0.1914062-0.3079834,0.31073   c-0.0079956,0.0109863-0.0137329,0.0229492-0.0214844,0.0341187c-0.0757446,0.1102295-0.1362305,0.2307129-0.1808472,0.3600464   c-0.0065308,0.0186768-0.0152588,0.0357056-0.0210571,0.0547485c-0.0323486,0.1071777-0.0560913,0.2181396-0.0639038,0.3343506   c-0.0161133,0.2416992-0.394043,6.0024414-0.0014648,13.5927734c0.0332031,0.6396484,0.46875,1.1875,1.0844727,1.3642578   c0.2226562,0.0639648,5.5014648,1.5742188,9.8374023,2.425293c4.1577148,0.8154297,11.6245117,3.5117188,11.699707,3.5385742   c0.0108032,0.0039673,0.022644,0.0022583,0.0335083,0.0059204c0.1506348,0.0508423,0.3092651,0.0839233,0.4762573,0.0839233   c0.0003052,0,0.0005493,0,0.0008545,0c0.000061,0,0.000061,0,0.0001221,0s0.0001831,0,0.0002441,0   c0.020752,0,0.041687-0.0004883,0.0627441-0.0014648c0.1049805-0.0043945,0.2067871-0.0198364,0.3048706-0.0445557   c0.0009155-0.0002441,0.0018311-0.0001221,0.0027466-0.0003662c0.4833984-0.1235352,11.90625-3.0512695,17.8696289-5.9506836   c5.7519531-2.7978516,28.1088867-10.7412109,28.3339844-10.8212891C88.5556641,71.1254883,88.9414062,70.6342773,89,70.0581055   c0.6953125-6.815918,0.0283203-13.3476562-0.0004883-13.6225586c-0.0134277-0.1289062-0.0478516-0.2495728-0.0911865-0.3656616   c-0.0100708-0.0270386-0.0220337-0.0519409-0.0336304-0.0782471c-0.0568848-0.1290894-0.1254883-0.2512817-0.2139893-0.3575439   c-0.0026245-0.0031738-0.0050049-0.0063477-0.0076904-0.0095215c-0.0900879-0.1063232-0.197937-0.1942749-0.3131714-0.2718506   c-0.0249023-0.0167847-0.0482178-0.0339355-0.0742798-0.0492554c-0.119751-0.0707397-0.2484131-0.1243896-0.3850708-0.159729   c-0.0106812-0.0027466-0.019104-0.0098267-0.0299072-0.0123901c-0.2286987-0.0537109-2.1201172-0.4976807-4.6919556-1.0968018   c3.2191772-1.2408447,6.1470947-2.5189819,6.3242798-2.5965576c0.5205078-0.2275391,0.8676758-0.7299805,0.8969727-1.2973633   C90.7695312,42.5385742,90.3974609,23.6235352,90.3813477,22.8222656z M24.8920898,20.8881836   c3.6552734-1.6689453,13.862793-4.9453125,16.9042969-5.909668c0.4956055-0.1572266,1.0175781-0.1552734,1.5112305,0.0058594   c2.4013672,0.7802734,8.4824219,2.6625977,13.0664062,3.2841797c4.1606445,0.5639648,19.4458008,3.5375977,27.3740234,5.0976562   c-1.9003906,0.7607422-4.0844727,1.5927734-5.8935547,2.168457c-4.0126953,1.2763672-18.3012695,7.3056641-20.8950195,8.4033203   c-2.0883789-0.296875-11.753418-1.7338867-16.8037109-3.5854492c-4.199707-1.5400391-16.456543-4.581543-23.4848633-6.2797852   C19.3691406,23.1269531,22.6088867,21.9301758,24.8920898,20.8881836z M42.4467773,58.1259766   c-0.3100586-0.0922852-0.7363281-0.1879883-1.1689453-0.2832031c-0.4042969-0.0888672-0.9082031-0.199707-1.1220703-0.2783203   c-5.2250977-1.9160156-22.9223633-6.1557617-27.5043945-7.2416992c-0.4169922-5.9971924-0.0971069-19.2539673,0.0409546-24.1182251   c5.4230957,1.2928467,21.6630859,5.2166138,26.4302368,6.9644165c4.8588867,1.7815552,13.3317871,3.1397705,16.5577393,3.6160278   c0.0376587,2.9388428,0.1231079,10.4158325,0.1120605,16.8987427c-3.5014648,1.2597656-7.3328857,2.6014404-9.7801514,3.4344482   c-1.0036621,0.3416748-2.1224976,0.7172852-3.3106689,1.112854C42.6208496,58.1896362,42.5367432,58.1528931,42.4467773,58.1259766   z M46.9790039,59.9580078c3.8422852-1.3081055,15.1347656-5.2758789,17.8017578-6.4624023   c0.5126953-0.2275391,1.046875-0.2963867,1.5390625-0.2011719c2.2543945,0.4399414,10.4775391,2.3398438,15.8969727,3.6015625   c-6.9936523,2.5273438-19.5854492,7.15625-23.8540039,9.2319336c-5.0952148,2.4785156-14.8530273,5.1015625-16.9121094,5.6416016   l-16.4389648-4.6318359C30.9165039,65.2456055,40.9428711,62.0126953,46.9790039,59.9580078z M21.2480469,79.4887695   c-0.1912231-4.4443359-0.1161499-8.1894531-0.038147-10.3052368l18.6824341,5.2639771   c-0.0595703,1.8634033-0.1444092,5.7073364-0.0297241,10.0499268c-2.5958252-0.888855-7.0463867-2.3412476-10.0603638-2.9324951   C26.7089844,80.9580078,23.0107422,79.9736328,21.2480469,79.4887695z M86.1025391,68.8139648   c-4.328125,1.5449219-22.4428711,8.0527344-27.7392578,10.628418c-4.3313599,2.1062622-12.0168457,4.3132324-15.4940186,5.2608643   c-0.1256714-4.4295044-0.036377-8.3720093,0.0233154-10.2108765c3.0657349-0.8173828,11.8158569-3.2506714,16.7827148-5.6661987   c4.7765503-2.3233643,20.9926147-8.1907349,26.487854-10.1611328   C86.3007202,60.8922729,86.4391479,64.777832,86.1025391,68.8139648z M87.425293,49.0576172   c-1.8491211,0.7885742-6.3144531,2.6523438-9.5708008,3.6889648c-0.0307007,0.0097656-0.0571899,0.026001-0.086792,0.0375366   c-4.5232544-1.0438232-9.210083-2.1096191-10.8731689-2.434021c-1.1025391-0.2158203-2.2558594-0.0751953-3.3339844,0.4047852   c-0.8031006,0.3572998-2.5880127,1.0371704-4.7671509,1.8380737c0.0006104-6.4424438-0.0830688-13.5400391-0.1166992-16.1234131   c3.5692139-1.5066528,16.4680786-6.9248657,20.0869751-8.0764771c2.8364868-0.9024658,6.4330444-2.3571167,8.6578369-3.2884521   C87.5048218,30.1827393,87.6728516,42.699646,87.425293,49.0576172z",
            'parsley': "M49.131,93.528c0.059,0.104,1.14,1.046,1.256,0.977c0.116-0.07,0.051-15.62,0.186-19.854   c0.094-2.929-0.65-7.299,2.093-9.298s5.068-3.208,8.322-3.115c3.255,0.093,12.646-0.279,15.343-0.837s4.51-0.465,3.766-1.209   c-0.743-0.744-3.301-3.162-6.647-2.976c-3.348,0.187-5.348,0.512-5.348,0.512s5.068-2.418,7.393-2.976   c2.324-0.559,5.301-1.767,5.951-2.464c0.65-0.698-0.558-1.395-1.534-1.581c-0.977-0.187-3.812,0.371-3.812,0.371   s3.998-1.999,5.486-4.323c1.487-2.324,1.999-4.23,2.046-4.696c0.046-0.465-0.918-0.748-1.93-0.697   c-1.24,0.062-2.767,0.139-4.161,0.79c-1.396,0.651-4.417,3.208-4.417,3.208s1.255-1.999,1.255-2.79c0-0.791,0.047-2.231-0.929-1.72   c-0.978,0.511-1.768,0.837-3.395,2.696c-1.627,1.86-5.486,7.114-5.486,7.114s2.139-3.626,2.324-5.114   c0.187-1.488-1.022-3.441-1.022-3.441c-0.278-0.512-0.54-0.655-1.519,0.14c-0.744,0.604-0.992,0.651-2.898,3.348   c-1.906,2.696-2.882,5.579-4.045,8.183c-1.162,2.604-2.93,7.206-4.882,9.438c-1.953,2.232-2.371,3.859-2.324,1.768   c0.046-2.093,0.79-6.974,1.72-9.95c0.93-2.975,1.209-4.51,3.068-7.113c1.86-2.604,8.834-9.531,10.229-12.368   c1.395-2.836,2.743-6.602,2.837-7.532c0.093-0.93,0.79-1.767-1.163-1.116c-1.953,0.651-3.316,1.535-3.952,2.124   c-0.893,0.827-1.812,1.596-1.812,1.596s-0.14-1.674-0.744-0.93s-2.186,2.138-2.883,3.44c-0.696,1.302-4.975,8.555-4.975,8.555   s0.931-4.836,2.093-7.486c1.162-2.65,4.137-7.021,5.021-10.136c0.883-3.115,0.789-3.301,0.789-3.952   c0-0.651,0.419-1.674-1.487-0.791s-3.998,2.79-4.742,4.742c-0.743,1.953-1.628,3.301-1.628,3.301s2.559-8.415,2.884-10.275   s0.046-2.325-0.047-2.836c-0.094-0.511-0.326-0.883-1.069-0.372c-0.744,0.511-1.813,1.906-1.813,1.906s0.79-2.417,0.651-4.044   c-0.14-1.627-1.722-4.975-1.952-5.626c-0.233-0.651-0.326-0.836-0.978,0.139c-0.65,0.977-3.348,3.999-3.44,5.766   c-0.092,1.767,0,3.999,0,3.999s-0.512-1.163-1.348-1.72c-0.838-0.558-1.953-1.209-2.046-0.233   c-0.093,0.977,0.511,5.301,1.208,7.114c0.698,1.813,1.023,5.068,1.023,5.068s-1.209-2.929-2.789-4.463   c-1.582-1.535-2.836-2.092-3.627-2.186c-0.791-0.093-0.791-0.046-0.698,1.441c0.093,1.488,1.721,4.742,2.046,5.812   c0.326,1.07,3.069,6.928,3.441,8.694c0.371,1.767,2.139,8.044,2.139,8.044s-2.418-5.626-2.65-6.556   c-0.232-0.93-3.026-8.413-3.254-8.788c-0.193-0.317-0.837-0.744-0.837,0.325c0,1.07-0.232,0.791-0.232,0.791   s-1.302-2.417-2.836-3.394c-1.534-0.977-2.557-1.349-3.022-1.674c-0.465-0.326-0.651-0.279-0.651,1.116s-0.186,2.371,0.511,4.231   c0.698,1.859,1.535,3.021,1.535,3.021s-1.023-0.558-1.674-0.697c-0.651-0.14-2.186-0.093-1.441,0.744   c0.744,0.837,5.161,6.742,6.742,9.159c1.58,2.418,7.067,8.509,7.67,10.369c0.605,1.859,1.814,5.579,2.14,7.672   c0.325,2.092,0.651,4.742,0.651,5.393s0.046,1.302-1.023-0.325c-1.068-1.627-4.51-4.882-4.836-7.532   c-0.324-2.65-1.859-6.555-3.301-8.973c-1.441-2.418-4.463-5.579-5.346-6.137s-1.163-0.65-1.441,0.558s-0.791,4.323,0.651,6.695   c1.441,2.371,2.185,3.44,2.185,3.44s-3.999-4.556-4.835-5.393s-2.231-2.604-3.022-3.255c-0.791-0.65-1.441-0.976-1.859-1.162   c-0.418-0.186-0.93-0.418-0.837,0.931c0.093,1.347,0.139,2.138,0.604,2.789c0.465,0.651,1.349,1.953,1.349,1.953   s-2.604-2.045-4.231-2.789c-1.627-0.744-1.953-1.07-4.092-1.116c-2.139-0.047-2.976,0.372-3.812,0.418s-0.65,0.279,0,1.162   c0.651,0.883,1.674,2.836,3.162,4.231c1.487,1.395,4.51,2.324,4.51,2.324s-2.976,0.14-3.673,0.791   c-0.698,0.651-1.349,1.069-0.187,1.348c1.163,0.279,5.672,1.303,7.253,1.441c1.581,0.14,3.812,0.187,4.789,0.651   s1.72,1.348,1.72,1.348s-4.324-1.348-6.37-1.115s-2.185-0.047-3.719,0.884c-1.534,0.93-2.371,1.999-2.557,2.324   s-0.511,0.559,1.302,0.977c1.813,0.419,6.695,1.44,9.02,1.302c2.324-0.14,9.81-0.372,11.577,0.325   c1.766,0.698,6.416,3.068,7.067,4.277s0.604,6.882,0.558,8.462C49.363,77.721,49.074,93.423,49.131,93.528z",
            'zucchini': "M86.478,13.322c-2.887-2.889-5.265-3.942-7.064-3.123c-1.22,0.552-3.96,2.193-5.662,3.439   c-6.681-1.063-12.767,4.219-17.57,8.391l-2.368,2.054c-10.484,9.089-21.326,18.487-31.209,28.56l-0.766,0.78   c-8.145,8.28-20.453,20.792-8.378,32.869c0.044,0.044,0.09,0.085,0.138,0.124c0.038,0.046,0.078,0.091,0.121,0.135   c3.629,3.629,7.296,5.056,10.877,5.056c8.339,0,16.206-7.741,22-13.442l0.771-0.759c10.11-9.92,19.544-20.805,28.668-31.332   l1.94-2.238c4.262-4.904,9.678-11.146,8.32-17.99c1.464-2.058,2.765-4.286,3.301-5.463C90.41,18.581,89.361,16.206,86.478,13.322z    M70.155,36.202l-2.243,2.38c-9.437,10.018-19.194,20.376-29.119,30.22l-0.765,0.76c-5.908,5.869-16.452,16.339-21.01,15.424   c-0.299-0.263-0.597-0.54-0.896-0.839c-0.044-0.044-0.09-0.085-0.138-0.124c-0.038-0.046-0.078-0.091-0.121-0.135   c-0.298-0.298-0.575-0.596-0.837-0.895c-0.921-4.556,9.549-15.1,15.418-21.008l0.763-0.769   c9.856-9.935,20.225-19.704,30.253-29.151l2.343-2.208c4.877-4.596,11.35-10.691,14.623-10.15c0.275,0.245,0.553,0.5,0.832,0.779   l0.26,0.262c0.281,0.281,0.538,0.56,0.783,0.837C80.842,24.861,74.749,31.328,70.155,36.202z M24.261,55.808l0.77-0.783   c9.787-9.974,20.576-19.327,31.009-28.372l2.37-2.056c6.447-5.601,11.454-9.318,16.762-7.032c-3.97,1.611-8.643,6.014-13.22,10.328   l-2.343,2.208c-10.045,9.462-20.431,19.247-30.319,29.215l-0.762,0.767c-6.312,6.355-13.693,13.791-15.722,19.581   C9.302,72.062,15.916,64.292,24.261,55.808z M75.408,41.604l-1.943,2.242c-9.079,10.476-18.468,21.308-28.479,31.132l-0.775,0.762   c-8.492,8.357-16.268,14.981-23.877,11.457c5.793-2.021,13.237-9.401,19.599-15.721l0.764-0.758   c9.957-9.876,19.731-20.251,29.183-30.286l2.242-2.38c4.312-4.574,8.713-9.245,10.324-13.213   C84.733,30.151,81.012,35.157,75.408,41.604z M84.797,21.979c-0.705-1.197-1.648-2.408-2.869-3.629l-0.26-0.262   c-1.323-1.324-2.635-2.312-3.931-3.033c1.148-0.723,2.334-1.408,2.992-1.719c0.454,0.052,1.769,0.813,3.344,2.39   c1.574,1.574,2.334,2.887,2.385,3.34C86.135,19.755,85.525,20.828,84.797,21.979z",
            'tomato': "M60.73,20.713c-1.027,0-2.08,0.056-3.144,0.14c1.958-2.174,4.323-4.251,6.63-5.003c1.919-0.626,2.968-2.691,2.343-4.61  c-0.628-1.919-2.69-2.972-4.611-2.342c-3.001,0.979-5.745,3.015-8.037,5.227c0.249-1.939,0.72-3.78,1.552-5.145  c1.051-1.725,0.506-3.975-1.22-5.026c-1.719-1.049-3.973-0.507-5.025,1.219c-1.756,2.879-2.498,6.481-2.755,9.839  c-1.542-2.02-2.855-4.256-3.202-6.291c-0.34-1.991-2.225-3.331-4.22-2.989c-1.991,0.338-3.33,2.228-2.99,4.218  c0.687,4.025,3.182,7.877,5.668,10.865c-0.933-0.065-1.855-0.102-2.762-0.102c-22.178,0-32.279,18.73-32.279,36.132  c0,21.28,18.894,39.013,42.203,39.703c0.161,0.021,0.325,0.033,0.491,0.033l0.539-0.008l0.402,0.008  c0.166,0,0.328-0.012,0.487-0.033C74.113,95.859,93.01,78.127,93.01,56.846C93.01,39.443,82.907,20.713,60.73,20.713z   M50.239,89.248c-0.084,0.001-0.166,0.007-0.249,0.014l-0.213-0.004l-0.092,0.002c-0.078-0.005-0.156-0.011-0.235-0.012  c-19.551-0.409-35.458-14.944-35.458-32.402c0-14.345,7.72-28.819,24.966-28.819c3.104,0,6.451,0.47,9.948,1.399  c0.614,0.163,1.262,0.163,1.875,0c3.498-0.929,6.845-1.399,9.949-1.399c17.246,0,24.966,14.474,24.966,28.819  C85.696,74.304,69.79,88.839,50.239,89.248z",
            'parmesan': "M10,32.56v36.702l0.061,0.208c0.187,0.627,5.008,15.404,44.269,20.427L55.144,90l34.882-42.274V9.16L10,32.56z   M53.677,50.791C25.467,46.93,16.314,38.027,13.753,34.558l70.538-20.625L53.677,50.791z M12.972,68.778V38.255  c4.388,4.617,15.051,11.939,39.836,15.406v33.027C19.68,82.039,13.609,70.268,12.972,68.778z M55.779,84.561V52.91l31.274-37.653  v31.401L55.779,84.561z",
            'avocado': "M72.692,56.457c-0.624-3.393-1.75-6.659-2.838-9.817c-0.675-1.96-1.374-3.987-1.931-5.992  c-0.396-1.427-0.743-2.915-1.077-4.355c-0.829-3.565-1.686-7.253-3.424-10.633c-2.743-5.337-7.637-8.797-12.465-8.813  c-0.639-0.002-1.276-0.002-1.914,0c-4.829,0.017-9.723,3.477-12.467,8.813c-1.737,3.379-2.594,7.065-3.423,10.63  c-0.335,1.441-0.681,2.931-1.078,4.358c-0.557,2.005-1.255,4.031-1.931,5.991c-1.088,3.159-2.213,6.425-2.837,9.818  c-1.214,6.597,0.529,13.31,4.783,18.417c4.383,5.264,10.91,8.282,17.907,8.282h0.003c6.997,0,13.524-3.019,17.907-8.282  C72.162,69.766,73.906,63.053,72.692,56.457z M65.604,72.955c-3.812,4.576-9.498,7.201-15.602,7.201h-0.003  c-6.104,0-11.791-2.625-15.602-7.202c-3.682-4.421-5.19-10.236-4.138-15.954c0.583-3.172,1.623-6.189,2.724-9.385  c0.69-2.002,1.403-4.072,1.985-6.165c0.414-1.488,0.768-3.01,1.109-4.481c0.824-3.543,1.602-6.89,3.169-9.938  c1.833-3.565,5.578-7.17,9.811-7.185c0.314-0.002,0.629-0.002,0.943-0.002c0.315,0,0.63,0,0.946,0.002  c4.232,0.015,7.976,3.619,9.809,7.185c1.568,3.05,2.346,6.397,3.17,9.941c0.342,1.471,0.695,2.991,1.108,4.479  c0.582,2.094,1.295,4.164,1.985,6.166c1.101,3.195,2.141,6.212,2.724,9.384C70.793,62.719,69.285,68.533,65.604,72.955z",
            'bacon': "M68.25,12.81,63.72,8.28l-.07-.07L55.73.29A1,1,0,0,0,54,1c.33,8.13-5.2,10.63-13,13.28-7.38,2.49-9.32,6-12.53,11.83l-.74,1.34C24,34.07,20.6,35.13,13,36.14,3.88,37.35,2,41.27,0,49.94a1,1,0,0,0,.27.93L12.81,63.39a1,1,0,0,0,.71.29,1,1,0,0,0,.28,0,1,1,0,0,0,.7-.74c1.92-8.24,3.3-11.21,11.32-12.28S37.9,48.29,42,41l.74-1.35c3.18-5.77,4.77-8.66,11.42-10.9s14.82-5,14.4-15.25A1,1,0,0,0,68.25,12.81ZM7.47,55.23a1.46,1.46,0,0,0,.14-.32C9.53,46.8,11,44.63,18.4,43.66s12.21-2.13,16.54-9.92l.75-1.35c3.11-5.65,4.68-8.49,11.14-10.67s13.32-5.14,14.56-13l.62.62c.14,7.83-5.32,10.3-13,12.9-7.38,2.49-9.32,6-12.53,11.83l-.74,1.34C32,42,28.58,43.11,21,44.11c-8.52,1.13-10.7,4.61-12.59,12.07ZM13.3,38.12c7.92-1,12.09-2.34,16.16-9.66l.74-1.35c3.18-5.77,4.77-8.66,11.42-10.9,6.06-2,13.48-4.54,14.34-12.87L58.65,6c0,.26-.08.54-.08.8v.11c-.34,7.18-6.46,9.83-12.7,11.94C38.3,21.43,36.32,25,33.06,30.94l-.74,1.34C28.76,38.67,25.4,39.7,18,40.68,9.15,41.85,6.9,45.49,5,52.79L2.1,49.86C4,42,5.45,39.16,13.3,38.12ZM53.5,26.83c-7.38,2.49-9.32,6-12.53,11.83L40.23,40c-3.66,6.59-7.11,7.65-14.68,8.65C17,49.78,14.85,53.25,13,60.71l-2.88-2.88c1.85-7.82,3.36-10.7,11.2-11.74s12.09-2.34,16.16-9.66l.74-1.34c3.18-5.77,4.77-8.66,11.42-10.9,6.06-2,13.46-4.56,14.32-12.88l2.64,2.64C66.7,21.77,61.22,24.23,53.5,26.83Z",
            'thyme': "M73.9,33.5c-0.1-0.1-2.8-2.3-5.9-2.2c0.3-0.5,0.5-1,0.7-1.6c0.8-3.5-1.7-6.9-1.8-7l-0.7-0.9l-1,0.5    c-0.2,0.1-4,2-4.8,5.4c-0.1,0.2-0.1,0.4-0.1,0.7c-2.3-1.5-5.3-1.4-5.4-1.4l-1.1,0l-0.2,1.1c0,0.2-0.7,4.4,1.7,7    c1.5,1.7,3.7,2.3,5.2,2.5c-2.3,6.3-4.7,14.5-6.8,22.5c-2.8-10.4-6.2-21.8-9.9-31.6c0.4,0,0.8,0.1,1.2,0.1c1.4,0,3.2-0.3,4.6-1.3    c2.9-2.1,3.2-6.3,3.2-6.5l0.1-1.1l-1.1-0.3c-0.2,0-4.3-1.1-7.2,1c-1.3,1-2.1,2.4-2.5,3.6c-0.7-1.6-1.3-3.2-2-4.6    c1.4-0.4,3.9-1.3,5.2-3.4c1.9-3,0.5-7.1,0.5-7.2l-0.4-1.1l-1.1,0.2c-0.2,0-3.3,0.5-5.3,2.5c-0.2-0.5-0.4-1.1-0.7-1.6    c-1.9-3-6.1-3.6-6.2-3.7l-1.1-0.2L30.3,6c-0.1,0.2-1.4,4.2,0.5,7.2c0.3,0.5,0.7,0.9,1.1,1.3c-3.4,0.3-5.8,3.3-5.9,3.5l-0.7,0.9    l0.7,0.9c0.1,0.1,2.8,3.3,6.4,3.3c0,0,0.1,0,0.1,0c2.2,0,4-1.3,5.1-2.3c1.1,2.5,2.2,5.2,3.3,8.1c-0.8-0.5-1.7-0.8-2.8-0.9    c-3.6-0.3-6.5,2.7-6.7,2.8l-0.8,0.8l0.7,0.9c0.1,0.1,2.5,3.6,6.1,3.9c0.2,0,0.3,0,0.5,0c2.1,0,3.9-1.1,5.1-1.9    c3.5,10,6.6,21.1,9.2,31c-3.4,13-6.1,24.4-6.3,25.3c-0.2,0.7,0.3,1.5,1,1.7c0.1,0,0.2,0,0.3,0c0.6,0,1.2-0.4,1.4-1.1    c0-0.2,2.1-9.2,5-20.3c3.2,12.9,5.2,22.5,5.2,22.8c0.1,0.7,0.7,1.1,1.4,1.1c0.1,0,0.2,0,0.3,0c0.8-0.2,1.2-0.9,1.1-1.6    c-0.1-0.3-2.5-12.4-6.5-27.8c1.4-5.5,3-11.2,4.6-16.4c1.1,0.8,3,1.9,5.1,1.9c0.2,0,0.5,0,0.7,0c3.5-0.4,5.9-4,6-4.1l0.6-1L71.1,45    c-0.1-0.1-3.2-3-6.8-2.6c-1.2,0.1-2.2,0.6-3.1,1.2c0.6-1.8,1.1-3.4,1.7-5c1.1,0.6,2.7,1.3,4.5,1.3c0.4,0,0.8,0,1.2-0.1    c3.5-0.7,5.5-4.4,5.6-4.6l0.5-1L73.9,33.5z M46.1,22.6c1-0.7,2.5-0.8,3.6-0.8c-0.3,1.1-0.8,2.5-1.8,3.2c-1,0.7-2.5,0.8-3.6,0.8    C44.5,24.7,45.1,23.3,46.1,22.6z M37.6,33.7c-1.2-0.1-2.4-1-3.2-1.8c0.9-0.6,2.2-1.3,3.5-1.2c1.2,0.1,2.4,1,3.2,1.8    C40.1,33.1,38.8,33.8,37.6,33.7z M40.2,12.8c0.7-1.1,2-1.7,3-2.1c0.2,1,0.2,2.5-0.5,3.6c-0.7,1.1-2,1.7-3,2.1    C39.5,15.4,39.5,13.9,40.2,12.8z M32.7,8.1c1.1,0.4,2.4,1,3,2.1c0.7,1.1,0.6,2.5,0.5,3.6c-1-0.3-2.3-0.9-3-2.1    C32.5,10.7,32.5,9.2,32.7,8.1z M32.4,20.2c-1.3,0-2.5-0.7-3.4-1.4c0.8-0.7,2.1-1.5,3.3-1.6c1.3,0,2.5,0.7,3.4,1.4    C34.8,19.4,33.6,20.2,32.4,20.2z M64.7,45.2c1.3-0.1,2.6,0.5,3.5,1.1c-0.7,0.8-1.8,1.7-3.2,1.9c-1.2,0.1-2.6-0.5-3.5-1.1    C62.2,46.3,63.4,45.3,64.7,45.2z M63,28.3c0.3-1.2,1.4-2.2,2.3-2.9c0.5,0.9,1,2.3,0.7,3.6c-0.3,1.2-1.4,2.2-2.3,2.9    C63.2,31,62.7,29.6,63,28.3z M56.2,29.8c1,0.1,2.5,0.5,3.3,1.5c0.8,0.9,1.1,2.4,1.1,3.5c-1-0.1-2.5-0.5-3.3-1.5    C56.4,32.4,56.2,30.9,56.2,29.8z M68.1,37.1c-1.2,0.2-2.6-0.3-3.6-0.8c0.6-0.8,1.7-1.9,3-2.1c1.2-0.2,2.6,0.3,3.6,0.8    C70.4,35.8,69.4,36.9,68.1,37.1z",
            'leek': "M88.67,85.083l-1.061-1.061c-0.374,0.374-0.742,0.557-1.125,0.562c1.161-1.179,1.863-2.626,1.972-4.086  c0.119-1.606-0.477-3.152-1.678-4.353c-1.648-1.649-4.066-3.635-6.626-5.737c-2.496-2.051-5.077-4.171-6.765-5.858  c-1.941-1.942-16.16-16.022-18.584-18.422c-0.904-6.702-4.848-32.673-4.889-32.941l-0.137-0.898l-0.859-0.295  c-4.329-1.489-9.383-0.414-12.292,2.609l-0.503,0.523l0.098,0.719c0.123,0.901,0.388,2.576,0.739,4.697l-1.786-4.082l-1.135,0.168  c-2.585,0.385-6.252,2.207-8.194,5.299l-0.426,0.678l2.235,5.029l-5.03-2.235l-0.677,0.425c-3.089,1.942-4.912,5.608-5.299,8.194  l-0.17,1.136l4.175,1.825c-2.183-0.361-3.903-0.634-4.81-0.757l-0.719-0.098l-0.523,0.503c-3.024,2.91-4.098,7.965-2.608,12.292  l0.295,0.858l0.897,0.137c0.269,0.04,26.226,3.981,32.939,4.89c2.438,2.461,16.486,16.645,18.425,18.584  c1.688,1.688,3.81,4.271,5.86,6.768c2.102,2.559,4.086,4.975,5.734,6.623c1.107,1.107,2.472,1.692,3.947,1.692  c1.597,0,3.185-0.702,4.481-1.974c-0.009,0.389-0.19,0.749-0.553,1.112l1.061,1.061c0.506-0.507,0.804-1.041,0.931-1.597  l0.646,0.646l1.061-1.061l-0.644-0.644C87.643,85.886,88.177,85.575,88.67,85.083z M47.093,14.588  c0.629,4.143,3.146,20.77,4.315,28.928c-1.005-0.601-2.165-1.173-3.394-1.531c-0.58-0.169-2.188-0.504-4.395-0.929  c-1.521-8.103-3.692-20.7-4.316-24.856C41.527,14.312,44.673,14.022,47.093,14.588z M33.39,19.864l5.603,12.81l-7.245-3.22  l-2.915-6.558C30.087,21.324,31.958,20.328,33.39,19.864z M19.885,33.369c0.464-1.433,1.461-3.304,3.031-4.558l16.776,7.457  c0.266,1.477,0.523,2.89,0.765,4.189c-2.265-0.421-4.835-0.886-7.451-1.351L19.885,33.369z M84.324,82.509l-1.815,1.817  c-1.346,1.347-3.045,1.53-4.242,0.332c-1.545-1.545-3.574-4.016-5.537-6.405c-2.097-2.554-4.266-5.193-6.058-6.985  C64.55,69.145,47.897,52.33,47.897,52.33l-0.361-0.365l-0.51-0.066c-5.131-0.672-27.534-4.062-32.439-4.806  c-0.565-2.421-0.275-5.564,1.612-7.788c5.921,0.889,28.562,4.856,30.976,5.561c2.238,0.652,4.474,2.354,5.154,3.034  c0,0,16.814,16.65,18.938,18.772c1.791,1.792,4.43,3.959,6.981,6.056c2.392,1.964,4.863,3.994,6.409,5.54  c0.591,0.591,0.862,1.267,0.807,2.01C85.408,81.038,85.003,81.83,84.324,82.509z",
            'onion': "M50,97.008c-18.994,0-34.443-13.691-34.443-30.521c0-12.53,8.827-23.907,22.008-28.436   c1.365-1.57,8.977-11.448,4.722-31.869l-0.66-3.188l18.95,9.265l-0.535,1.367c-0.057,0.153-5.775,15.269,4.067,25.029   c12.359,4.924,20.333,15.816,20.333,27.831C84.443,83.316,68.988,97.008,50,97.008z M40.071,40.038v0.531l-1.09,0.372   c-12.104,3.998-20.233,14.264-20.233,25.545c0,15.071,14.017,27.331,31.253,27.331c17.231,0,31.253-12.26,31.253-27.331   c0-10.789-7.307-20.594-18.607-24.98l-0.411-0.158l-0.274-0.35c-9.649-9.588-6.69-22.822-5.363-27.135L45.995,8.68   C49.116,28.017,42.051,37.751,40.071,40.038z",
            'orange': "M73.887,34.863L73.887,34.863C73.887,34.863,73.887,34.862,73.887,34.863c-0.385-0.363-0.778-0.717-1.178-1.062    c-0.01-0.008-0.019-0.017-0.029-0.025c-0.392-0.337-0.792-0.665-1.199-0.985c-0.02-0.016-0.041-0.032-0.061-0.048    c-0.396-0.31-0.8-0.611-1.21-0.904c-0.035-0.025-0.071-0.05-0.106-0.075c-0.398-0.282-0.801-0.555-1.21-0.821    c-0.052-0.034-0.105-0.067-0.158-0.101c-0.396-0.253-0.797-0.499-1.203-0.737c-0.072-0.042-0.144-0.083-0.217-0.125    c-0.391-0.225-0.787-0.443-1.188-0.653c-0.093-0.049-0.188-0.096-0.282-0.144c-0.384-0.197-0.772-0.389-1.164-0.572    c-0.117-0.055-0.236-0.106-0.353-0.16c-0.375-0.17-0.752-0.336-1.135-0.492c-0.142-0.058-0.285-0.112-0.427-0.169    c-0.365-0.144-0.73-0.285-1.101-0.417c-0.167-0.06-0.337-0.114-0.506-0.171c-0.351-0.119-0.703-0.237-1.06-0.345    c-0.196-0.059-0.394-0.112-0.591-0.168c-0.336-0.095-0.672-0.191-1.012-0.277c-0.225-0.057-0.453-0.105-0.68-0.157    c-0.318-0.073-0.635-0.148-0.957-0.213c-0.259-0.052-0.522-0.094-0.783-0.14c-0.296-0.052-0.59-0.108-0.888-0.153    c-0.298-0.045-0.599-0.077-0.9-0.114c-0.268-0.033-0.534-0.071-0.803-0.098c-0.355-0.035-0.714-0.057-1.073-0.082    c-0.22-0.015-0.437-0.037-0.658-0.048c-0.364-0.018-0.733-0.022-1.1-0.028c2.293-6.58,7.436-7.386,7.436-7.386    c-0.925-2.746-3.699-2.802-3.699-2.802c-4.252,3.037-5.531,7.498-5.913,10.211c-18.524,0.796-33.298,16.06-33.298,34.78    c0,0.693,0.026,1.379,0.066,2.061c0.012,0.207,0.031,0.413,0.047,0.619c0.037,0.485,0.082,0.968,0.139,1.447    c0.026,0.221,0.054,0.441,0.084,0.66c0.069,0.498,0.149,0.992,0.238,1.483c0.031,0.171,0.058,0.343,0.092,0.513    c0.132,0.668,0.28,1.33,0.449,1.983c0.002,0.008,0.005,0.016,0.007,0.024c0.166,0.639,0.355,1.269,0.556,1.894    c0.05,0.154,0.104,0.306,0.155,0.459c0.166,0.492,0.342,0.979,0.53,1.461c0.061,0.156,0.121,0.312,0.184,0.467    c0.214,0.528,0.44,1.048,0.679,1.563c0.038,0.082,0.073,0.167,0.112,0.249c0.294,0.622,0.605,1.234,0.935,1.835    c0,0,0,0.001,0,0.001c0,0,0,0,0,0C25.371,87.686,36.83,95,50,95c19.229,0,34.818-15.589,34.818-34.818    C84.818,50.203,80.613,41.211,73.887,34.863z",
            'chicken': "M69.997,74.493H25.045c-5.257,0-11.517-2.998-15.224-7.29c-2.554-2.957-3.657-6.187-3.193-9.341  c0.448-3.038,2.619-4.056,4.363-4.873c1.677-0.786,3.001-1.406,3.579-3.656C20.425,26.571,35.702,27.38,40.72,27.646  c11.118,0.589,17.191,5.083,21.507,9.116l2.703-1.134c-0.964-4.106-0.1-7.339,2.459-9.002c1.757-1.143,3.926-1.433,5.797-0.773  c1.641,0.578,2.843,1.801,3.383,3.446c0.508,1.544,0.445,3.169-0.104,4.614c0.159,0.052,0.311,0.11,0.453,0.173  c0.102-0.505,0.235-1.013,0.4-1.516c0.492-1.498,1.677-4.128,4.086-4.92c3.593-1.183,7.491,0.794,8.679,4.407  c0.585,1.78,0.413,3.666-0.39,5.26c1.593,0.808,2.85,2.225,3.434,4.004c0.575,1.749,0.438,3.616-0.387,5.257  c-0.826,1.645-2.242,2.866-3.987,3.439c-3,0.987-6.358-1.147-8.149-3.541l-6.76,2.35c-0.069,0.093-0.143,0.186-0.219,0.277  c1.466,1.811,2.954,3.201,5.096,4.798c2.029,1.513,3.502,2.555,4.577,3.315c3.041,2.151,3.508,2.482,4.007,4.986  c0.081,0.408,0.182,0.913,0.342,1.562c0.424,1.712,0.025,3.413-1.153,4.919C83.507,72.497,75.935,74.493,69.997,74.493z   M38.712,31.091c-7.279,0-16.507,2.612-20.751,19.115c-0.989,3.847-3.588,5.064-5.484,5.953c-1.672,0.784-2.226,1.128-2.386,2.214  c-0.394,2.674,1.077,5.034,2.38,6.543c3.041,3.521,8.329,6.078,12.574,6.078h44.952c5.647,0,11.811-2.004,13.739-4.468  c0.673-0.859,0.614-1.508,0.512-1.921c-0.177-0.714-0.287-1.269-0.377-1.718c-0.227-1.137-0.227-1.137-2.596-2.813  c-1.091-0.771-2.583-1.827-4.647-3.367c-2.384-1.777-4.097-3.386-5.757-5.441c-1.348,0.789-3.045,1.571-5.089,2.433  c-1.683,0.709-2.716,2.179-3.911,3.88c-1.274,1.813-2.718,3.867-5.208,5.271c-8.736,4.924-19.846,3.721-23.772-2.575  c-2.766-4.435-3.425-9.874-1.808-14.921c1.246-3.891,3.695-7.003,6.391-8.121c6.168-2.561,13.007,0.641,16.681,2.36  c0.574,0.269,1.073,0.503,1.48,0.671c2.679,1.106,4.663,1.278,6.289,1.074c-0.04-0.04-0.08-0.079-0.12-0.119  c-4.285-4.215-9.617-9.46-21.27-10.078C39.944,31.11,39.335,31.091,38.712,31.091z M42.517,39.77c-1.261,0-2.511,0.202-3.701,0.695  c-1.431,0.593-3.345,2.665-4.399,5.957c-1.303,4.066-0.776,8.44,1.444,12.001c2.931,4.699,12.026,5.355,19.084,1.378  c1.801-1.015,2.899-2.579,4.063-4.234c1.38-1.963,2.807-3.993,5.415-5.093c1.283-0.541,4.106-1.731,5.688-2.871  c0.039-0.035,0.08-0.067,0.123-0.099c0.033-0.024,0.067-0.048,0.103-0.07c0.337-0.264,0.6-0.522,0.753-0.768  c0.027-0.063,0.06-0.124,0.095-0.183c0.016-0.04,0.028-0.079,0.037-0.117c0.086-0.36-0.217-0.971-0.852-1.719  c-0.528-0.622-0.941-0.996-1.353-1.186c-0.066-0.021-0.132-0.047-0.195-0.077c-0.678-0.217-1.396,0.028-2.652,0.458  c-0.046,0.016-0.093,0.032-0.141,0.048c-0.02,0.007-0.04,0.014-0.061,0.021c-2.403,0.82-5.992,1.93-11.669-0.411l0,0  c-0.447-0.185-0.997-0.441-1.629-0.737C50.118,41.568,46.276,39.77,42.517,39.77z M81.351,42.614c0.659,0,1.285,0.375,1.581,1.001  c0.812,1.712,3.299,3.547,4.728,3.077c0.854-0.28,1.548-0.879,1.952-1.685c0.406-0.809,0.474-1.73,0.19-2.594  c-0.456-1.387-1.738-2.327-3.19-2.339c-0.75-0.006-1.413-0.491-1.647-1.204c-0.234-0.713,0.012-1.497,0.612-1.947  c1.162-0.871,1.637-2.388,1.181-3.775c-0.584-1.777-2.491-2.757-4.262-2.174c-0.541,0.178-1.324,1.078-1.853,2.687  c-0.486,1.481-0.603,3.119-0.289,4.074c0.292,0.886-0.163,1.845-1.034,2.18l-6.314,2.428c0.011,0.013,0.021,0.025,0.032,0.038  c0.732,0.862,1.226,1.693,1.485,2.504l6.254-2.173C80.966,42.646,81.159,42.614,81.351,42.614z M64.958,39.411  c0.303,0.295,0.599,0.58,0.887,0.849c1.146-0.363,2.362-0.633,3.657-0.319l6.331-2.435c-0.013-0.013-0.026-0.026-0.041-0.039  c-0.406-0.356-1.245-0.426-2.302-0.192c-0.805,0.177-1.624-0.229-1.969-0.979c-0.344-0.749-0.118-1.636,0.541-2.13  c1.162-0.871,1.637-2.388,1.181-3.775c-0.199-0.606-0.609-1.022-1.22-1.237c-0.84-0.296-1.887-0.141-2.727,0.407  c-2.103,1.366-0.991,5.348-0.602,6.536c0.285,0.867-0.144,1.807-0.984,2.16L64.958,39.411z",
            'mushrooms': "M 50 6 C 30.821094 6 15 19.805201 15 37 C 15 39.128961 15.221564 40.837264 15.8125 42.28125 C 16.403436 43.725236 17.4672 44.890185 18.78125 45.46875 C 21.409349 46.62588 24.206637 45.83892 27.3125 44.8125 C 30.694821 43.694716 34.615784 42.061397 38.84375 40.8125 C 35.071631 46.508444 33 54.968461 33 64 C 33 71.915246 34.713963 79.1927 37.625 84.65625 C 40.536037 90.1198 44.831266 94 50 94 C 55.168734 94 59.463962 90.1198 62.375 84.65625 C 65.286038 79.1927 67 71.915246 67 64 C 67 54.9593 64.930886 46.504295 61.15625 40.8125 C 65.384216 42.061397 69.305179 43.694716 72.6875 44.8125 C 75.793363 45.83892 78.590651 46.62588 81.21875 45.46875 C 82.5328 44.890185 83.596564 43.725236 84.1875 42.28125 C 84.778436 40.837264 85 39.128961 85 37 C 85 19.805201 69.178907 6 50 6 z M 50 10 C 67.271889 10 81 22.273723 81 37 C 81 38.815581 80.759993 40.03833 80.46875 40.75 C 80.177507 41.46167 79.954207 41.653794 79.59375 41.8125 C 78.872836 42.129912 76.810848 41.949579 73.9375 41 C 68.190805 39.100842 59.664169 34.984131 50 35 C 40.335832 34.984131 31.809195 39.100842 26.0625 41 C 23.189152 41.949579 21.127164 42.129912 20.40625 41.8125 C 20.045793 41.653794 19.822493 41.46167 19.53125 40.75 C 19.240007 40.03833 19 38.815581 19 37 C 19 22.273723 32.728112 10 50 10 z M 50 39 C 51.50908 38.997522 52.999867 39.107131 54.46875 39.3125 A 2.0009764 2.0009764 0 0 0 54.75 39.5625 C 59.178523 43.083605 63 53.074143 63 64 C 63 71.327811 61.361645 78.055567 58.84375 82.78125 C 56.325855 87.506933 53.115536 90 50 90 C 46.884464 90 43.674144 87.506933 41.15625 82.78125 C 38.638356 78.055567 37 71.327811 37 64 C 37 53.08954 40.827767 43.092185 45.25 39.5625 A 2.0001996 2.0001996 0 0 0 45.5 39.3125 C 46.978751 39.104469 48.480443 38.997505 50 39 z",
            'eggplant': "M28.152,40.531c-8.299,1.522-14.431,6.173-18.066,11.986   c-1.576,2.629-2.664,5.427-3.226,8.343c-0.563,2.918-0.583,5.923-0.021,8.88c1.22,6.393,5.056,12.427,11.856,16.638   c5.542,3.427,12.447,4.883,19.417,4.585c7.106-0.331,14.363-2.461,20.506-6.15c5.802-3.501,10.283-8.313,13.681-13.771   c5.559-8.946,8.129-19.332,9.275-29.662c0.74,0.288,1.512,0.493,2.278,0.699c1.069,0.302,2.207-0.304,2.478-1.41   c0.209-0.649,0.048-1.305-0.35-1.799c-1.142-1.402-1.741-2.912-2.078-4.467c-0.335-1.531-0.376-3.202-0.304-4.906   c1.104-3.623,0.763-7.381-0.766-10.621c-1.118-2.399-2.928-4.5-5.222-6.039c0.298-2.083,0.755-9.509-7.914-11.763   c-1.086-0.273-2.184,0.393-2.476,1.508c-0.281,1.065,0.418,2.18,1.526,2.446c4.212,1.083,4.935,4.177,4.957,6.055   c-2.827-0.885-5.78-0.815-8.481,0.006c-2.972,0.912-5.714,2.835-7.616,5.441c-1.356,1.135-2.829,2.196-4.428,2.937   c-1.621,0.854-3.431,1.452-5.582,1.689c-1.842,0.164-2.446,2.519-1.039,3.582l0.057,0.035c1.132,0.858,2.357,1.594,3.63,2.219   l-0.116,0.13C43.435,33.996,39.088,38.448,28.152,40.531z M55.01,23.126c1.985-0.986,3.686-2.231,5.277-3.594   c0.199-0.098,0.35-0.286,0.48-0.468c1.39-1.981,3.42-3.381,5.644-4.109c2.194-0.646,4.659-0.614,6.94,0.281   c2.648,0.976,4.688,2.999,5.823,5.371c1.088,2.38,1.38,5.135,0.525,7.776c-0.07,0.219-0.116,0.43-0.153,0.682   c-0.095,2.004-0.072,4.086,0.397,6.173c0.066,0.459,0.169,0.877,0.314,1.261c-0.729-0.339-1.452-0.655-2.104-1.085   c-1.925-1.156-3.606-2.724-4.62-4.802c-0.267-0.479-0.688-0.868-1.27-1.02c-1.053-0.333-2.215,0.275-2.513,1.365   c-0.86,2.918-3.388,4.711-6.306,5.143c0.988-2.999,1.756-6.189,1.889-9.345c-0.035-0.143-0.013-0.247-0.046-0.385   c-0.176-1.1-1.214-1.88-2.306-1.682c-2.505,0.397-5.129,0.311-7.604-0.262c-0.683-0.157-1.329-0.366-1.973-0.552   C53.947,23.639,54.475,23.36,55.01,23.126z M54.927,31.851c0.917-0.897,1.854-1.923,2.914-2.932   c1.059,0.083,2.151,0.083,3.185,0.049c-0.422,2.881-1.301,5.729-2.409,8.438c-0.391,1.016,0.079,2.213,1.152,2.637   c0.141,0.064,0.298,0.1,0.525,0.116c4.388,0.496,8.973-0.995,11.657-4.664c0.906,1.063,1.998,1.958,3.112,2.749   c-0.818,10.146-3.057,20.469-8.471,29.207c-2.914,4.62-6.669,8.657-11.448,11.555c-5.174,3.129-11.318,4.93-17.355,5.194   c-5.638,0.263-11.167-0.84-15.51-3.549c-5.094-3.12-7.939-7.571-8.81-12.162c-0.382-2.141-0.366-4.272,0.064-6.415   c0.349-2.072,1.158-4.106,2.306-5.979c2.67-4.312,7.317-7.747,13.62-8.922C42.432,44.708,47.327,39.672,54.927,31.851z",
            'broccoli': "M58,95H41.1c-0.8,0-1.5-0.7-1.5-1.5c0-5.8-1.3-11.3-3.8-16.6L24.6,53.4c-0.9,0.1-1.7,0.2-2.6,0.2   c-8.9,0-16.1-6.8-16.1-15.2c0-6.4,4.3-12.1,10.6-14.2c0.3-11.1,10-19.9,21.9-19.9c4.7,0,9.4,1.5,13.2,4.1C52.4,8.1,53.2,8,54,7.9   c1.3-0.2,2.6-0.3,3.9-0.3c9.5,0,17.7,5.7,20.7,13.9c0,0.1,0.1,0.1,0.1,0.2c0.2,0.6,0.5,1.2,0.6,1.8c7.9,1.1,13.9,7.6,13.7,15.3   c-0.1,7-5.6,13.2-13,14.6c-1.9,0.4-3.9,0.4-5.9,0L63.5,75.7c-2.7,5.6-4,11.6-4,17.7C59.5,94.3,58.8,95,58,95z M42.6,92h13.9   c0.2-6.1,1.7-12,4.3-17.5L72,51c0.3-0.6,1-1,1.7-0.8c1.9,0.5,3.9,0.5,5.8,0.2c6-1.1,10.5-6.1,10.6-11.7c0.1-5.8-4.2-10.8-10.1-12   c0.2,2.2,0,4.4-0.6,6.4c-1.1,3.7-3.5,6.4-6.8,7.8c-0.8,0.3-1.6-0.1-2-0.8c-0.3-0.8,0.1-1.6,0.8-2c2.4-1,4.2-3.1,5-5.9   c0.6-2,0.7-4.2,0.3-6.4c-0.2-0.2-0.3-0.4-0.3-0.7C75,16.7,67.2,10.5,58,10.5c-0.5,0-1,0-1.5,0.1c-0.2,0.1-0.5,0.2-0.7,0.2   c-0.4,0-0.9,0-1.3,0.1c-0.9,0.2-1.8,0.4-2.6,0.6c-0.1,0-0.2,0.1-0.3,0.1c-4.4,1.7-7.6,6-7.6,11c0,0.8-0.7,1.5-1.5,1.5   s-1.5-0.7-1.5-1.5c0-5.4,3-10.2,7.3-12.8c-2.9-1.7-6.3-2.6-9.8-2.6c-10.4,0-18.9,7.9-18.9,17.5c0,0.1,0,0.2,0,0.3l0,0.2   c0,0.7-0.4,1.3-1.1,1.5c-5.6,1.5-9.5,6.3-9.5,11.7c0,6.7,5.9,12.2,13.1,12.2c1,0,2-0.1,3.1-0.4c0,0,0,0,0,0   c0.1-0.1,0.2-0.2,0.4-0.2c2-0.8,3.5-2.3,4.3-4.3c0.8-2,0.8-4.1,0-6.1c-0.3-0.8,0.1-1.6,0.8-2c0.8-0.3,1.6,0.1,2,0.8   c1.1,2.7,1.1,5.7,0,8.4c-1,2.4-2.8,4.4-5.2,5.5l11.1,23.2C41,80.8,42.4,86.3,42.6,92z M45.8,77c-0.6,0-1.1-0.3-1.4-0.9l-9.7-20.2   c-0.2-0.5-0.2-1.1,0.1-1.5c0.3-0.4,0.9-0.7,1.4-0.6c0.7,0.1,1.2,0.1,1.7,0.1c2.5,0,4.9-0.7,7-1.9c0.5-0.3,1-0.3,1.5,0   c0.5,0.3,0.8,0.8,0.8,1.3v22.2c0,0.7-0.5,1.3-1.2,1.5C46,77,45.9,77,45.8,77z M38.5,56.9l5.7,12V55.7   C42.5,56.4,40.5,56.8,38.5,56.9z M53.9,75.1c-0.1,0-0.2,0-0.3,0c-0.7-0.2-1.2-0.8-1.2-1.5V54.9c0-0.5,0.2-0.9,0.6-1.2   c0.4-0.3,0.8-0.4,1.3-0.3c2.9,0.7,5.7,0.5,8.3-0.6c0.6-0.2,1.2-0.1,1.6,0.4c0.4,0.5,0.5,1.1,0.3,1.7l-9.2,19.3   C55,74.8,54.5,75.1,53.9,75.1z M55.4,56.7V67l4.9-10.4C58.7,56.9,57.1,57,55.4,56.7z",
            'potatoes': "M88.99,16.147C83.017,9.843,73.25,7.5,65.022,7.5c-9.522,0-17.306,4.028-25.096,7.922   c-8.7,4.348-16.83,9.781-23.508,16.888c-3.489,3.714-6.387,7.913-8.259,12.672c-0.936,2.38-1.637,4.87-2.219,7.389   c-1.873,8.111-0.812,16.624,2.848,24.1C9.717,78.37,17.75,92.5,33.227,92.5c18.523,0,34.02-12.338,45.541-25.384   c2.698-3.055,5.2-6.296,7.621-9.573c2.792-3.78,5.097-7.756,6.479-12.271c1.246-4.072,1.948-8.503,2.115-12.758   c0.14-3.594-0.578-7.227-2.066-10.503C91.939,19.858,90.617,17.865,88.99,16.147z M85.696,43.077   c-0.991,3.239-2.688,6.419-5.34,10.009c-2.812,3.806-5.035,6.602-7.21,9.065C59.757,77.313,46.326,85,33.227,85   c-11.535,0-17.644-11.708-17.703-11.826c-2.932-5.989-3.74-12.777-2.277-19.115c0.574-2.485,1.192-4.556,1.891-6.331   c1.394-3.542,3.663-7.002,6.746-10.282c5.509-5.863,12.508-10.873,21.396-15.315l0.642-0.321C50.921,18.307,57.532,15,65.022,15   c6.067,0,14.119,1.656,18.523,6.305c1.038,1.096,1.894,2.376,2.543,3.806c1.011,2.226,1.495,4.684,1.4,7.109   C87.342,35.971,86.722,39.724,85.696,43.077z",
        }.get(ingr_name, " M 0 0 L 10 5 L 0 10 z ")
    # todo: find simpler paths: some of these paths too slow, esp tomato and feta I think (based on that they are long in terms of characters)
    def get_ingr_scale(ingr_name):
        return{
            'eggs': .3,
            'butternut pumpkin': .4,
            # 'butter': 1,
            # 'flour': .3,
            'chard': .35,
            'garlic': .35,
            'olive oil': .35,
            'lemon': .3,
            'feta': .25,
            'parsley': .3,
            'zucchini': .3,
            'tomato': .25,
            'parmesan': .25,
            'avocado': .3,
            'bacon': .3,
            'thyme': .3,
            'leek': .3,
            'onion': .3,
            'orange': .22,
            'chicken': .4,
            'mushrooms': .25,
            'eggplant': .3,
            'broccoli': .3,
            'potatoes': .2,
        }.get(ingr_name, .01)

    def find(s, ch):
        return [i for i, ltr in enumerate(s) if ltr == ch]
    ingr_index = find(diagram_text,'|')[0::2]
    action_index = find(diagram_text,'/')[0::2]
    branch_open_index = find(diagram_text,'[')

    if len(branch_open_index)>0:
        def is_int(s):
            try:
                int(s)
                return True
            except ValueError:
                return False
        branch_number = list()
        for i in branch_open_index:
            if is_int(diagram_text[i+1]):
                branch_number.append(int(diagram_text[i+1]))
            else:
                branch_number.append(0)
        # Fill in elements that are zero (not assigned by user) with counts, starting at max (there's probably a python way to do it, but use this for now)
        k = max(branch_number)
        for i in range(len(branch_number)):
            if branch_number[i] == 0:
                k += 1
                branch_number[i] = k
        #branch_number = [int(diagram_text[i+1]) for i in branch_open_index]

    branch_close_index_raw = find(diagram_text, ']')
    branch_close_index = list()
    for b_i in branch_open_index[-1::-1]:
      branch_close = branch_close_index_raw[next(x[0] for x in enumerate(branch_close_index_raw) if x[1] > b_i)]
      branch_close_index.append(branch_close)
      branch_close_index_raw.remove(branch_close)
    branch_close_index = list(reversed(branch_close_index))

    ingr2action = list()
    for ingr_index_i in ingr_index:
        ingr2action.append(next(x[0] for x in enumerate(action_index) if x[1] > ingr_index_i))

    action_in_branch = list()
    for action_i in action_index:
        b = 0
        for i in range(len(branch_open_index)):
            if branch_open_index[i] < action_i and branch_close_index[i] > action_i:
                if branch_number[i]>0:
                    b = branch_number[i]
                else:
                    b = i+1 # because want "first" branch =1 not 0 .. but check this works when sometimes assign a branch_number!
        action_in_branch.append(b)
    action2action = list()
    for i in range(len(action_in_branch)-1):
        if action_in_branch[i] in action_in_branch[i+1:]: # is not last occurrence of action_in_branch[i] value:
            action2action.append(i + 1 + next(x[0] for x in enumerate(action_in_branch[i+1:]) if x[1] == action_in_branch[i])) #index of next occurrence of action_in_branch[i])
        else:
            action2action.append(i + 1 + next(x[0] for x in enumerate(action_in_branch[i+1:]) if x[1] < action_in_branch[i]))


    # line below should work; else can use slower method of ingr_index_end and line below that..
    # ingr = re.findall('\|(.*?)\|', diagram_text)  # if want to keep []: '\[[^\[\]]*\]' .. weird this can fail?!?!
    ingr_index_end = find(diagram_text,'|')[1::2]
    ingr = [diagram_text[ingr_index[i]+1:ingr_index_end[i]] for i in range(len(ingr_index))]
    ingr = [s.strip('->').strip() for s in ingr]
    ingr = [s.split(' + ') for s in ingr]

    line_per_ingr = [len(ingr[i])-1 for i in range(len(ingr))]

    action = re.findall('\/(.*?)\/', diagram_text)

    utensil = re.findall('in(.*?)\{', diagram_text)
    utensil = [s.strip() for s in utensil]
    # need to get number of "/" between each set of "{ .. }" e.g. [2,1,1] and use that for height_utensil
    utensil_index = find(diagram_text,'{')
    utensil_close_index_raw = find(diagram_text, '}')
    utensil_close_index = list() # this code copied from branch_close_index .. should allow for nested utensils.
    for u_i in utensil_index[-1::-1]:
      utensil_close = utensil_close_index_raw[next(x[0] for x in enumerate(utensil_close_index_raw) if x[1] > u_i)]
      utensil_close_index.append(utensil_close)
      utensil_close_index_raw.remove(utensil_close)
    utensil_close_index = list(reversed(utensil_close_index))

    if len(utensil_index) > 0:
        action_in_utensil = list()
        for action_i in action_index:
            u = 0
            for i in range(len(utensil_index)):
                if utensil_index[i] < action_i and utensil_close_index[i] > action_i:
                    u = i + 1  # because want "first"=1 not 0
            action_in_utensil.append(u)
    else:
        action_in_utensil = [0 for i in range(len(action))]

    branch_to_y_delta = {0: 50, 1: 30, 2: 30, 3: 40, 4: 40}
    y_delta = [branch_to_y_delta[action_in_branch[i]] for i in range(len(action))]
    y_action = [sum(y_delta[:i+1]) for i in range(len(action))]
    x_action = [230 - (action_in_branch[i]>0)*50 - (action_in_branch[i]>2)*30
                # - (action_in_utensil[i]==0 and i != 0 and (i != len(action)-1))*60 # <- remove for now. not sure if do want this
                for i in range(len(action))] # todo not sure always works

    height_ingr = [16*i for i in line_per_ingr]
    # attempt to align with action, but put it lower if heigh_ingr makes it necessary:
    # todo oh wait, should use middle_y_ingr[i-1] instead of sum(height_ingr[0:i]) for cases where only gets crowded "midway"
    middle_y_ingr = list()
    middle_y_ingr.append(max(y_action[ingr2action[0]]-25, .5*height_ingr[0] + 20))
    for i in range(1, len(height_ingr)):
        middle_y_ingr.append(max(y_action[ingr2action[i]]-25, middle_y_ingr[i-1] + .5*height_ingr[i-1] + .5*height_ingr[i] + 15))
    # middle_y_ingr = [max(y_action[ingr2action[i]]-25, sum(height_ingr[0:i]) + .5*height_ingr[i]  + (i+1)*20) for i in range(len(height_ingr))]
    y_ingr = [max(10,10 + middle_y_ingr[i] - .5*height_ingr[i]) for i in range(len(ingr))]

    # height utensil and y _utensil should just come from y_action and action_per_utensil
    y_utensil = [-23 + min([y_action[i] for i in range(len(y_action)) if action_in_utensil[i]==(j+1)]) for j in range(len(utensil_index))]
    height_utensil = [26 + \
                      max([y_action[i] for i in range(len(y_action)) if action_in_utensil[i] == (j + 1)]) -
                      min([y_action[i] for i in range(len(y_action)) if action_in_utensil[i] == (j + 1)])
                      for j in range(len(utensil_index))]
    x_utensil = [340 - 5*len(utensil[i]) for i in range(len(utensil_index))]

    # want: if x1 far from x2, then make x1_a2a further from (more positive) x1
    x1_a2a = [x_action[i]+10 + 5*(x_action[action2action[i]]!=x_action[i]) for i in range(len(action2action))]
    # want: if x1 far from x2, make x2_a2a further from (more negative) x2
    x2_a2a = [x_action[action2action[i]] + 10 - 7/30*(x_action[action2action[i]]-x_action[i]) for i in range(len(action2action))]
    # want: fine as is.
    y1_a2a = [y_action[i] + 5 for i in range(len(action2action))]
    # if y1 closer to y2, then make it get closer to y2
    y2_a2a = [y_action[action2action[i]] - 8 - 5/50*min(100, y_action[action2action[i]]-y_action[i]) for i in range(len(action2action))] # "min(100" puts max on y-gap, for distant action2action


    x1_i2a = [50 + 4*len(max(ingr[i], key=len)) for i in range(len(ingr2action))] # based on longest string within ingr block
    x2_i2a = [x_action[ingr2action[i]]-10 for i in range(len(ingr2action))]
    y1_i2a = [y_ingr[i] +10 + line_per_ingr[i]*7 for i in range(len(ingr2action))]
    y2_i2a = [y_action[ingr2action[i]]-5 for i in range(len(ingr2action))]

    dwg = svgwrite.Drawing(filename="test-svgwrite.svg",
                           size=("600px", max(y_action + middle_y_ingr)+50))

    marker = dwg.marker(viewBox="0 0 10 10", refX="0", refY="5",
                        markerUnits="strokeWidth", markerWidth="4", markerHeight="3",
                        orient="auto", fill="#696969")
    marker.add(dwg.path(d="M 0 0 L 10 5 L 0 10 z"))
    dwg.defs.add(marker)


    for i in range(len(utensil)):
        dwg.add(dwg.rect(insert=(50+150, y_utensil[i]), size=("200px", height_utensil[i]),
                         fill="#FDC08E", style="opacity: .3", rx=5, ry=5))
        t = utensil[i].find('(')
        if t == -1:
            utensil_name = utensil[i].strip()
        else:
            utensil_name = utensil[i][:t].strip()
        dwg.add(dwg.path(d=get_utensil_path(utensil_name),
                         transform="translate(" + str(50+350) + "," + str(y_utensil[i] - 10) + ") scale("+str(get_utensil_scale(utensil_name))+")",
                         style="opacity: .5", fill="#ff9900"))
        dwg.add(dwg.text(utensil[i],
                         insert=(50+x_utensil[i], y_utensil[i] + 10), fill="#545454",
                         style="font-size: 12; font-family: Arial"))

    for i in range(len(ingr2action)):
        line = dwg.add(dwg.line(start=(50+x1_i2a[i], y1_i2a[i]), end=(50+x2_i2a[i], y2_i2a[i]),
                                stroke='#696969', stroke_width=2, marker_end=marker.get_funciri()))

    for i in range(len(action2action)):
        line = dwg.add(dwg.line(start=(50+x1_a2a[i], y1_a2a[i]), end=(50+x2_a2a[i], y2_a2a[i]),
                                stroke='#696969', stroke_width=2, marker_end=marker.get_funciri()))

    for i in range(len(ingr)):  # need to use tspan for multiple line
        for j in range(len(ingr[i])):
            t = ingr[i][j].find('(')
            if t == -1:
                ingr_name = ingr[i][j].strip()
            else:
                ingr_name = ingr[i][j][:t].strip()
            dwg.add(dwg.path(d=get_ingr_path(ingr_name), # todo: until '('
                             transform="translate(" + str(45-((j+i)%3)*20) + "," + str(-15+y_ingr[i]+12*1.05*(j+1)) + ") scale(" + str(
                                 get_ingr_scale(ingr_name)) + ")",
                             style="opacity: .5", fill="#B1654B"))
            dwg.add(dwg.text(ingr[i][j],
                             insert=(50+30, y_ingr[i]+12*1.05*(j+1)), fill="#B1654B", style="font-size: 12; font-family: Arial"))
        # paragraph = dwg.add(dwg.g(font_size=12, fill = "#B1654B", style="font-family: Arial"))
        # atext = dwg.text("", insert=(50+30, y_ingr[i]), fill="#B1654B", style="font-size: 12; font-family: Arial")
        # for ingr_j in ingr[i]:
        #     atext.add(dwg.tspan(ingr_j, dx='0', dy=['1.05em']))
        # dwg.add(atext)

    for i in range(len(action)):
        dwg.add(dwg.text(action[i],
                         insert=(50+x_action[i], y_action[i]), fill="#E75481",
                         style="font-size: 12px; font-family: Arial; font-weight=bold"))

    return dwg.tostring()


def dish_diagram_view(request, pk): # <- probably this ends up existing for each dish, so dish_id may be input and in url like the stack-overflow example
    svg_data = generate_diagram_svg_data(pk)
    return HttpResponse(svg_data, content_type="image/svg+xml")

#@login_required
#@require_POST
#def like(request):
#    if request.method == 'POST':
#        user = request.user
#        dish = Dish.objects.filter(dish_id = request.GET['d'])
#        
#        if dish.like_chef_id.filter(id=user.id).exists():
#            # user has already liked this company
#            # remove like/user
#            dish.likes.remove(user)
#            message = 'You disliked this'
#        else:
#            # add a new like for a company
#            dish.like_chef_id.add(user)
#            message = 'You liked this'
#    ctx = {'likes_count': dish.likes.count(), 'message': message}
#    # use mimetype instead of content_type if django < 5
#    return HttpResponse(json.dumps(ctx), content_type='application/json')


class RecipeAutocomplete(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        # Don't forget to filter out results depending on the visitor !
        if not self.request.user.is_authenticated():
            return Recipe.objects.none()
        qs = Recipe.objects.all()
        if self.q:
            qs = qs.filter(recipe_name__icontains=self.q)
        return qs

# Create your views here. 8/26: I forget when I entered this and what it does! For a table!?
def display_meta(request):
    values = request.META.items()
    values.sort()
    html = []
    for k, v in values:
        html.append('<tr><td>%s</td><td>%s</td></tr>' % (k, v))
    return HttpResponse('<table>%s</table>' % '\n'.join(html))

def search_form(request):
    return render(request, 'search_form.html')

def search(request): # this still works for searching dish names!
    errors = []
    if 'q' in request.GET:
        q = request.GET['q']
        if not q:
            errors.append('Enter a search term.')
        elif len(q) > 40:
            errors.append('Please enter at most 40 characters.')
        else:
            #dishes = Dish.objects.filter(dish_method__icontains=q).order_by("date_created").all()
            if 'ch' in request.GET:
                ch = request.GET['ch']
                recipe_categories = RecipeCategory.objects.filter(recipecategory_name__icontains=q).all()
                recipes = Recipe.objects.filter(
                    Q(recipe_name__icontains=q) | Q(recipecategory_id__in=recipe_categories)).order_by(
                    "-date_created").all()
                dishes_all = Dish.objects.filter(chef_id=ch).filter(
                    Q(dish_method__icontains=q) | Q(dish_name__icontains=q) |
                    Q(tags__name=q) | Q(recipe_id__in=recipes)).distinct().order_by(
                    "-date_created").all()
                chefs = Chef.objects.filter(chef_id=ch).all()

                paginator = Paginator(dishes_all, 12)  # 15 per page
                page = request.GET.get('page')
                try:
                    dishes = paginator.page(page)
                except PageNotAnInteger:
                    dishes = paginator.page(1)
                except EmptyPage:
                    dishes = paginator.page(paginator.num_pages)

                return render(request, 'search_results.html',
                              {'dishes': dishes, 'query': q, 'chefs': chefs})
            else:
                # todo get dishes with recipe_category__icontains=q .. I think this below works.
                recipe_categories = RecipeCategory.objects.filter(recipecategory_name__icontains=q).all()
                recipes = Recipe.objects.filter(
                    Q(recipe_name__icontains=q) | Q(recipecategory_id__in=recipe_categories)).order_by(
                    "-date_created").all()[:12]
                dishes = Dish.objects.filter(
                    Q(dish_method__icontains=q) | Q(dish_name__icontains=q) | Q(tags__name=q) |
                    Q(recipe_id__in=recipes)).distinct().order_by(
                    "-date_created").all()[:12]
                chefs = Chef.objects.filter(first_name__icontains=q).all()[:12]
                ingredients = Ingredient.objects.filter(ingredient_name__icontains=q).all()[:12]
                return render(request, 'search_results.html',
                              {'dishes': dishes, 'recipes': recipes, 'chefs': chefs,
                               'ingredients': ingredients, 'query': q})
    return render(request, 'search_form.html', {'errors': errors})


def tagsearch(request):
    q = request.GET['q']
    dishes = Dish.objects.filter(tags__name=q).order_by("-date_created").all()
    recipes = Recipe.objects.filter(tags__name=q).order_by("-date_created").all()
    return render(request, 'tagsearch_results.html', {'dishes': dishes, 'recipes': recipes})

class ChefList(ListView):
    model = Chef
    context_object_name = 'all_chefs'

class RecipeList(ListView):
    model = Recipe
    context_object_name = 'all_recipes'

class DishList(ListView):
    model = Dish
    context_object_name = 'all_dishes'

class RecipeCategoryList(ListView):
    model = RecipeCategory
    context_object_name = 'all_recipe_categories'

class IngredientList(ListView):
    model = Ingredient
    context_object_name = 'all_ingredients'

class HomePageView(TemplateView):
    template_name = "home.html"
#    def get_context_data(self, **kwargs):
#        context = super(HomePageView, self).get_context_data(**kwargs)
#        context['latest_dishs'] = Dish.objects.filter(dish_status=1, \
#                                                      chef_id__followed_by = self.request.user.id). \
#            order_by("-date_created").all()[:15]
#        context['chef_comments'] = Chef_Dish_Comments.objects.filter(dish_id__in=context['latest_dishs'])
#        return context
    def get_context_data(self, **kwargs):
        context = super(HomePageView, self).get_context_data(**kwargs)
        dish_list = Dish.objects.filter(dish_status=1, chef_id__followed_by = self.request.user.id).order_by("-date_created").all()
        paginator = Paginator(dish_list, 15) # 15 per page
        page = self.request.GET.get('page')
        try:
            context['page_dishes'] = paginator.page(page)
        except PageNotAnInteger:
            context['page_dishes'] = paginator.page(1)
        except EmptyPage:
            context['page_dishes'] = paginator.page(paginator.num_pages)
        context['chef_comments'] = Chef_Dish_Comments.objects.filter(dish_id__in=context['page_dishes'])
        # context['dish_diagram'] = reverse('dish_diagram', args=[1]) # ugh .. how to get this for each dish! probs can't?
        return context


class RecipeDetailView(DetailView):
    model = Recipe
    def get_context_data(self, **kwargs):
        context = super(RecipeDetailView,
                        self).get_context_data(**kwargs)
        if (self.object.recipe_id != 1):
            context['dishes'] = Dish.objects.filter(dish_status = 1).filter(recipe_id = self.object.recipe_id).order_by("-date_created")
            context['chef_comments'] = Chef_Dish_Comments.objects.filter(dish_id__in=context['dishes'])
        return context

class RecipeCategoryDetailView(DetailView):
    model = RecipeCategory
    def get_context_data(self, **kwargs):
        context = super(RecipeCategoryDetailView, self).get_context_data(**kwargs)
        context['recipes'] = Recipe.objects.filter(recipecategory_id = self.object.recipecategory_id).order_by("-date_created")
        return context

class DishUpdate(UpdateView):
    template_name = 'update_dish_form.html'
    form_class = UpdateDishForm
    def get_queryset(self):
        return Dish.objects.filter(dish_id=self.kwargs.get("pk", None))
    def get_success_url(self):
        return '/cooklog/dish/' + str(self.object.dish_id) + '/'


#class DishDetailView(DetailView):
#    model = Dish
#    def get_context_data(self, **kwargs):
#        context = super(DishDetailView, self).get_context_data(**kwargs)
#        exclude = set(string.punctuation)
#        s = ''.join(ch for ch in self.object.dish_name.replace('-', ' ') if ch not in exclude)
#        go_words = [word for word in s.lower().split() if word not in get_stop_words('en')]
#            #+ [word for word in self.object.dish_method.lower().split() if word not in get_stop_words('en')]
#        
#        context['recipe_matcher'] = go_words #self.object.dish_name.split() # <- temporary!
#        #context['recipe_match'] = Recipe.objects.filter(recipe_name__contains=self.object.dish_name.split())
#        #context['recipe_match'] = Recipe.objects.filter(reduce(lambda x, y: x | y, [Q(recipe_name__contains=word) for word in go_words]))
#        context['recipe_match'] = Recipe.objects.filter(reduce(lambda x, y: x | y, [Q(recipe_name__contains=word) for word in go_words]))
#        
#        context['recipe'] = Recipe.objects.get(recipe_id = self.object.recipe_id_id)
#        context['user_chef_like'] = Dish.objects.filter(dish_id = self.object.dish_id, like_chef_id = self.request.user.id)
#        context['chef_comments'] = Chef_Dish_Comments.objects.filter(dish_id = self.object.dish_id)
#        if (self.object.recipe_id_id != 1):
#            context['recipe_dishes'] = Dish.objects.filter(dish_status = 1).filter(recipe_id = self.object.recipe_id).exclude(dish_id = self.object.dish_id).order_by("-date_created").all()[:10] # 10 most recent version of the recipe...
#        return context


class DishDetailView(FormMixin, DetailView):
    model = Dish
    form_class = NewCommentForm # not needed??? form_class = NewCommentForm #UpdateDishForm
    def get_success_url(self):
        return '/cooklog/dish/' + str(self.object.dish_id) #reverse('cooklog/dish/', kwargs={'slug': self.object.slug})
    def get_context_data(self, **kwargs):
        context = super(DishDetailView, self).get_context_data(**kwargs)

        # only if dish name not empty: removes stop words and single letter words (e.g. "w" for with)
        exclude = set(string.punctuation)
        s = ''.join(ch for ch in self.object.dish_name.replace('-', ' ') if ch not in exclude)
        go_words = [word for word in s.lower().split() if word not in get_stop_words('en') and len(word)>1]
        if len(go_words) > 0:
            context['recipe_matcher'] = go_words
            context['recipe_match'] = Recipe.objects.filter(reduce(lambda x, y: x | y, [Q(recipe_name__contains=word) for word in go_words]))

        # context['dish_update_method_on_dish_detail_form'] = UpdateDishMethodForm(initial={'dish_id': self.object, 'dish_method': self.object.dish_method})
        context['add_comment_form'] = NewCommentForm(initial={'dish_id': self.object})
        context['chef_comments'] = Chef_Dish_Comments.objects.filter(dish_id = self.object.dish_id)
        
        context['recipe'] = Recipe.objects.get(recipe_id = self.object.recipe_id_id)
        if self.object.recipe_id_id != 1:
            context['recipe_dishes'] = Dish.objects.filter(dish_status = 1).filter(recipe_id = self.object.recipe_id).exclude(dish_id = self.object.dish_id).order_by("-date_created").all()[:10] # 10 most recent version of the recipe...

        context['dish_diagram'] = reverse('dish_diagram', args=[self.object.dish_id])
        return context

# I thought this was necessary for e.g. putting comments on this, but I dont think so!!
    # def post(self, request, *args, **kwargs):
    #     self.object = self.get_object()
    #     form = self.get_form()
    #     if form.is_valid():
    #         return self.form_valid(form)
    #     else:
    #         return self.form_invalid(form)
    #
    # def form_valid(self, form):
    #     form.save()
    #     return super(DishDetailView, self).form_valid(form)


class ChefDetailView(DetailView):
    model = Chef
    def get_context_data(self, **kwargs):
        context = super(ChefDetailView, self).get_context_data(**kwargs)
        context['week_dish'] = Dish.objects.filter(chef_id=self.object.chef_id).filter(dish_status=1).filter(
            date_created__range=[datetime.now() - timedelta(days=7), datetime.now()])
        context['month_dish'] = Dish.objects.filter(chef_id=self.object.chef_id).filter(dish_status=1).filter(
            date_created__range=[datetime.now() - timedelta(days=31), datetime.now()])
        context['best_dishes'] = Dish.objects.filter(chef_id=self.object.chef_id,
                                                     chef_id__followed_by=self.request.user.id).order_by("-dish_rating",
                                                                                                         "-date_created").all()[:3]
        context['chef_comments'] = Chef_Dish_Comments.objects.filter(dish_id__in=context['best_dishes'])
        return context

class ChefFeedView(DetailView):
    model = Chef
    def get_context_data(self, **kwargs):
        context = super(ChefFeedView, self).get_context_data(**kwargs)
        dish_list = Dish.objects.filter(chef_id = self.object.chef_id, dish_status = 1, chef_id__followed_by = self.request.user.id).order_by("-date_created").all()
        paginator = Paginator(dish_list, 6) # 6 per page
        page = self.request.GET.get('page')
        try:
            context['page_dishes'] = paginator.page(page)
        except PageNotAnInteger:
            context['page_dishes'] = paginator.page(1)
        except EmptyPage:
            context['page_dishes'] = paginator.page(paginator.num_pages)

        # context['best_dishes'] = Dish.objects.filter(chef_id = self.object.chef_id, chef_id__followed_by = self.request.user.id).order_by("-dish_rating","-date_created").all()[:4]
        # context['todo_dishes'] = Dish.objects.filter(chef_id = self.object.chef_id, dish_status = 2, chef_id__followed_by = self.request.user.id).order_by("-date_scheduled").all()
        context['chef_comments'] = Chef_Dish_Comments.objects.filter(dish_id__in=context['page_dishes'])
        # context['best_chef_comments'] = Chef_Dish_Comments.objects.filter(dish_id__in=context['best_dishes'])
        # context['todo_chef_comments'] = Chef_Dish_Comments.objects.filter(dish_id__in=context['todo_dishes'])
        return context


class ChefScheduleView(DetailView):
    model = Chef
    def get_context_data(self, **kwargs):
        context = super(ChefScheduleView, self).get_context_data(**kwargs)
        context['todo_dishes'] = Dish.objects.filter(chef_id = self.object.chef_id).filter(dish_status = 2).filter(date_scheduled__gte=datetime.now()).order_by("date_scheduled").all()
        context['archive_dishes'] = Dish.objects.filter(chef_id = self.object.chef_id).filter(dish_status = 2).filter(date_scheduled__lt=datetime.now()).order_by("date_scheduled").all()
        return context

class ChefWeekScheduleView(DetailView):
    model = Chef
    def get_context_data(self, **kwargs):
        context = super(ChefWeekScheduleView, self).get_context_data(**kwargs)
        context['todo_dishes'] = Dish.objects.filter(chef_id = self.object.chef_id).filter(dish_status = 2).filter(date_scheduled__range=[datetime.now(),datetime.now()+timedelta(days=6)]).order_by("date_scheduled").all()
        return context

class ChefBriefView(DetailView):
    model = Chef
    def get_context_data(self, **kwargs):
        context = super(ChefBriefView, self).get_context_data(**kwargs)
        context['dishes'] = Dish.objects.filter(chef_id = self.object.chef_id).filter(dish_status = 1).order_by("-date_created").all()
        return context

class ChefAlbumView(DetailView):
    model = Chef
    def get_context_data(self, **kwargs):
        context = super(ChefAlbumView, self).get_context_data(**kwargs)
        dish_list = Dish.objects.filter(chef_id = self.object.chef_id, dish_status=1, chef_id__followed_by = self.request.user.id).order_by("-date_created").all()
        paginator = Paginator(dish_list, 12) # 12 per page
        page = self.request.GET.get('page')
        try:
            context['page_dishes'] = paginator.page(page)
        except PageNotAnInteger:
            context['page_dishes'] = paginator.page(1)
        except EmptyPage:
            context['page_dishes'] = paginator.page(paginator.num_pages)
        return context

class HomeAlbumView(TemplateView):
    template_name = "home_album.html"
    def get_context_data(self, **kwargs):
        context = super(HomeAlbumView, self).get_context_data(**kwargs)
        dish_list = Dish.objects.filter(dish_status=1,chef_id__followed_by = self.request.user.id).order_by("-date_created").all()
        paginator = Paginator(dish_list, 12) # 12 per page
        page = self.request.GET.get('page')
        try:
            context['page_dishes'] = paginator.page(page)
        except PageNotAnInteger:
            context['page_dishes'] = paginator.page(1)
        except EmptyPage:
            context['page_dishes'] = paginator.page(paginator.num_pages)
        return context


class IngredientDetailView(DetailView):
    model = Ingredient
    def get_context_data(self, **kwargs):
        context = super(IngredientDetailView, self).get_context_data(**kwargs)
        context['dishes'] = Dish.objects.filter(ingredient_id = self.object.ingredient_id)
        return context

class IngredientAlbumView(TemplateView):
    template_name = "ingredient_album.html"
    def get_context_data(self, **kwargs):
        context = super(IngredientAlbumView, self).get_context_data(**kwargs)
        context['ingredients'] = Ingredient.objects.order_by("ingredient_name").all()[:30]
        return context

class RecipeCreate(CreateView):
    #model = Recipe
    #fields = ['recipe_name', 'recipe_source', 'recipe_type', 'chef_id', 'date_created']
    #success_url = "/cooklog/recipes/"
    form_class = NewRecipeForm
    template_name = 'cooklog/recipe_form.html'
    def get_initial(self):
        return {'chef_id' : self.request.user.id } #self.request.GET.get('u') }
    def get_success_url(self):
        if self.request.GET.get('next'):
            if self.request.GET.get('next')=="new":
                return '/cooklog/dish/add/?next=' + str(self.object.recipe_id)
            elif self.request.GET.get('next')=="newtodo":
                return '/cooklog/dish/add-todo/?next=' + str(self.object.recipe_id)
            else:
                return '/cooklog/dish/recipe_choose/' + self.request.GET.get('next') + '/?next=' + str(self.object.recipe_id)
        else:
            return '/cooklog/recipe/' + str(self.object.recipe_id) + '/'


class RecipeUpdate(UpdateView):
    model = Recipe
    fields = ['recipe_name', 'recipecategory_id', 'tags', 'recipe_source', 'recipe_method','recipe_comments',
              'recipe_image', 'chef_id', 'date_created']
    def get_success_url(self):
        return '/cooklog/recipe/' + str(self.object.recipe_id) + '/'



class RecipeDelete(DeleteView):
    model = Recipe
    success_url = reverse_lazy('recipe-list')

class ChefCreate(CreateView):
    model = Chef
    fields = ['first_name', 'last_name', 'email', 'date_created', 'chef_to_user_id'] #..now! (or default=now)
    def get_success_url(self):
        return '/cooklog/chef/' + str(self.object.chef_id) + '/'

class ChefFollowsUpdate(UpdateView):
    form_class = UpdateChefFollowsForm
    template_name = 'update_chef_follow_form.html'
    def get_queryset(self):
        return ChefFollows.objects.filter(follower_id=self.kwargs.get("pk", None)) # self.request.user.id should work too
    def get_success_url(self):
        return '/cooklog/' # not: chef/' + str(self.request.user.id) + '/'


class ChefUpdate(UpdateView):
    model = Chef
    fields = ['first_name', 'last_name', 'bio', 'email', 'chef_image'] #'date_created'
    def get_success_url(self):
        return '/cooklog/chef/' + str(self.object.chef_id) + '/'

class DishCreate(CreateView):
    form_class = NewDishShortForm
    template_name = 'new_dish_form.html'
    def get_initial(self):
        if self.request.GET.get('next'):
            return {'chef_id' : self.request.user.id , 'recipe_id' : self.request.GET.get('next') }
        else :
            return {'chef_id' : self.request.user.id } 
    def get_success_url(self):
        return '/cooklog/dish/' + str(self.object.dish_id) + '/'

class DishQuickCreate(CreateView):
    form_class = NewDishQuickForm
    template_name = 'new_dish_quick_form.html'
    def get_initial(self):
        return {'chef_id' : self.request.user.id, 'recipe_id': 1 } # default: None.
    def get_success_url(self):
        return '/cooklog/dish/' + str(self.object.dish_id) + '/'

class DishTodoCreate(CreateView):
    form_class = NewDishTodoForm
    template_name = 'new_dish_form.html'
    #success_url = '/cooklog/dishes/'
    def get_initial(self):
        return {'chef_id' : self.request.user.id, 'dish_status': 2, 'recipe_id' : self.request.GET.get('next') } #self.request.GET.get('u') }
    def get_success_url(self):
        return '/cooklog/dish/' + str(self.object.dish_id) + '/'

class DishTodoQuickCreate(CreateView):
    form_class = NewDishTodoQuickForm
    template_name = 'new_dish_todo_quick_form.html'
    def get_initial(self):
        return {'chef_id': self.request.user.id, 'recipe_id': 1, 'dish_status': 2}  # default recipe: None.
    def get_success_url(self):
        return '/cooklog/dish/' + str(self.object.dish_id) + '/'


#class DishWeekTodoCreate(CreateView):
#    form_class = NewDishWeekTodoForm
#    template_name = 'new_dishweek_form.html'
#    #success_url = '/cooklog/dishes/'
#    def get_initial(self):
#        return {'chef_id' : self.request.user.id, 'dish_status': 2 } #self.request.GET.get('u') }
#    def get_success_url(self):
#        return '/cooklog/dish/' + str(self.object.dish_id) + '/'


class DishLongCreate(CreateView):
    form_class = NewDishLongForm
    template_name = 'new_dish_form.html'
    #success_url = '/cooklog/dishes/'
    def get_initial(self):
        return {'chef_id' : self.request.user.id } #self.request.GET.get('u') }
    def get_success_url(self):
        return '/cooklog/dish/' + str(self.object.dish_id) + '/'

class DishPhotoUpdate(UpdateView):
    template_name = 'update_dish_photo_form.html'
    form_class = UpdateDishPhotoForm
    def get_queryset(self):
        return Dish.objects.filter(dish_id=self.kwargs.get("pk", None))
    def get_success_url(self):
        if self.request.GET.get('next'):
            if (str(self.request.GET.get('next'))=="0"):
                return '/cooklog/'
            else:
                return '/cooklog/chef/' + str(self.request.GET.get('next')) + '/'
        else:
            return '/cooklog/dish/' + str(self.object.dish_id) + '/'

class ChefWeekCountView(DetailView):
    model = Chef
    def get_context_data(self, **kwargs):
        context = super(ChefWeekCountView, self).get_context_data(**kwargs)
        context['week_dish'] = Dish.objects.filter(chef_id = self.object.chef_id).filter(dish_status = 1).filter(date_created__range=[datetime.now()-timedelta(days=7), datetime.now()])
        context['week_rating_count'] = Dish.objects.filter(chef_id = self.object.chef_id).filter(dish_status = 1).filter(date_created__range=[datetime.now()-timedelta(days=7), datetime.now()]).values('dish_rating').annotate(Count('dish_id'))
        context['week_recipe_count'] = Dish.objects.filter(chef_id = self.object.chef_id).filter(dish_status = 1).filter(date_created__range=[datetime.now()-timedelta(days=7), datetime.now()]).values('recipe_id').annotate(Count('recipe_id'))
#        context['week_dishtype_count'] = Dish.objects.filter(chef_id = self.object.chef_id).filter(dish_status = 1).filter(date_created__range=[datetime.now()-timedelta(days=7), datetime.now()]).values('dishtype_id').annotate(Count('dishtype_id'))

        context['month_dish'] = Dish.objects.filter(chef_id = self.object.chef_id).filter(dish_status = 1).filter(date_created__range=[datetime.now()-timedelta(days=30), datetime.now()])
        context['month_rating_count'] = Dish.objects.filter(chef_id = self.object.chef_id).filter(dish_status = 1).filter(date_created__range=[datetime.now()-timedelta(days=30), datetime.now()]).values('dish_rating').annotate(Count('dish_id'))
        context['month_recipe_count'] = Dish.objects.filter(chef_id = self.object.chef_id).filter(dish_status = 1).filter(date_created__range=[datetime.now()-timedelta(days=30), datetime.now()]).values('recipe_id').annotate(Count('dish_id'))
#        context['month_dishtype_count'] = Dish.objects.filter(chef_id = self.object.chef_id).filter(dish_status = 1).filter(date_created__range=[datetime.now()-timedelta(days=30), datetime.now()]).values('dishtype_id').annotate(Count('dish_id'))
        return context

class IngredientCreate(CreateView):
    model = Ingredient
    template_name = 'new_ingredient_form.html'
    fields = ['ingredient_name', 'ingredient_type_id', 'ingredient_type_detail',
              'maker_id','ingredient_url','ingredient_image',
              'date_created']
    def get_queryset(self):
        return Ingredient.objects.filter(ingredient_id=self.kwargs.get("pk", None))
    def get_success_url(self):
        return '/cooklog/ingredient/' + str(self.object.ingredient_id) + '/'
#success_url = '/cooklog/ingredients/' # maybe later to that ingredient's page?

class IngredientUpdate(UpdateView):
    model = Ingredient
    template_name = 'update_ingredient_form.html'
    fields = ['ingredient_name', 'ingredient_type_id', 'ingredient_type_detail',
              'maker_id','ingredient_url','ingredient_image',
              'date_created']
    def get_queryset(self):
        return Ingredient.objects.filter(ingredient_id=self.kwargs.get("pk", None))
    def get_success_url(self):
        return '/cooklog/ingredient/' + str(self.object.ingredient_id) + '/'

# def my_image(request):
#     image_data = open("/Users/katiequinn/Documents/parkrun_barcode.png", "rb").read()
#     return HttpResponse(image_data, content_type="image/png")


#class UploadImageView(CreateView):
#    form_class = UploadImageForm
#    template_name = 'upload.html'
#    success_url = '/cooklog/dishes/' # ideally it would be that dish!!

# todo surely this should be a View based on the ..Comments.. MODEL, similar to the NewLike View? where dish_id is a "pk"?
# (todo cont'd ... this may help solve the problem getting the "in place" edit"??)
class NewCommentView(CreateView):
    form_class = NewCommentForm #(initial={'chef_id': 3}) #user = request.user) #, initial={'chef_id': user.id})
    template_name = 'new_comment_form.html'
    #success_url = '/cooklog/dishes/'  # ideally goes to that dish!
    def get_initial(self):
        return {'dish_id' : self.request.GET.get('next') , 'chef_id' : self.request.user.id }
    def get_success_url(self):
        if self.request.GET.get('c'):
            if (str(self.request.GET.get('c')) == "0"):
                return '/cooklog/'
            else:
                return '/cooklog/chef/feed/' + str(self.request.GET.get('c')) + '/'
        else:
            return '/cooklog/dish/' + self.request.GET.get('next') + '/'
    def get_context_data(self, **kwargs):  # todo is this necessary? does it do anything??
        context = super(NewCommentView, self).get_context_data(**kwargs)
        context['dish'] = Dish.objects.get(dish_id = self.request.GET.get('next'))
        return context

#class NewLikeView(CreateView):
#    form_class = NewLikeForm
#    template_name = 'new_like_form.html'
#    #success_url = '/cooklog/dishes/' # ideally goes to that dish!
#    def get_initial(self):
#        return {'dish_id' : self.request.GET.get('next') , 'chef_id' : self.request.user.id } #self.request.GET.get('u')}
#    def get_form_kwargs(self, **kwargs):
#        kwargs = super(NewLikeView, self).get_form_kwargs()
#        redirect = self.request.GET.get('next')
#        if redirect:
#            if 'initial' in kwargs.keys():
#                kwargs['initial'].update({'next': redirect})
#            else:
#                kwargs['initial'] = {'next': redirect}
#        return kwargs
#    def form_invalid(self, form):
#        import pdb;pdb.set_trace()  # debug example
#        # inspect the errors by typing the variable form.errors
#        # in your command line debugger. See the pdb package for
#        # more useful keystrokes
#        return super(NewLikeView, self).form_invalid(form)
#    def form_valid(self, form):
#        redirect = form.cleaned_data.get('next')   # this necessary as next after submit
#        if redirect:
#            self.success_url = '/cooklog/dish/' + redirect + '/' # hardcodes url, oh well.
#        return super(NewLikeView, self).form_valid(form)
#    def get_context_data(self, **kwargs):
#        context = super(NewLikeView, self).get_context_data(**kwargs)
#        context['dish'] = Dish.objects.get(dish_id = self.request.GET.get('next'))
#        #context['u'] = User.objects.get(id = self.request.GET.get('u'))
#        return context


class CommentDeleteView(DeleteView):
    model = Chef_Dish_Comments
    form_class = CommentDeleteForm
    template_name = 'cooklog/comment_confirm_delete.html'
    #success_url = '/cooklog/dishes/' # later send it back using "next"
    def get_success_url(self):
        if self.request.GET.get('next'):
            if (str(self.request.GET.get('next')) == "0"):  # <- HM MAYBE this is incorrect way to do it?
                return '/cooklog/'
            else:
                return '/cooklog/chef/feed/' + str(self.request.GET.get('next')) + '/'
        else:
            return '/cooklog/dish/' + str(self.object.dish_id_id) + '/'



class RecipeChooseView(UpdateView): # <- "built" based on NewCommentView
    model = Dish
    form_class = RecipeChooseForm
    template_name = 'recipe_choose_form.html'
    #fields = ['dish_name', 'recipe_id']
    def get_queryset(self):
        return Dish.objects.filter(dish_id=self.kwargs.get("pk", None))
    def get_success_url(self):
        return '/cooklog/dish/' + str(self.object.dish_id) + '/'
    def get_initial(self):
        return {'recipe_id' : self.request.GET.get('next') }

# dammit... struggling with ManyToMany! Should this be a def NewLikeView(request) with request.POST and save??
class NewLikeView(UpdateView): # <- "built" based on RecipeChooseView, but uses user..
    # model = Dish # dont need, because it's in NewLikeForm
    form_class = NewLikeForm
    template_name = 'new_like_form.html'
    def get_queryset(self):
        return Dish.objects.filter(dish_id=self.kwargs.get("pk", None))
    def get_initial(self): # only used if you visit the actual url; not if submit the "form" using in-template html
        return {'like_chef_id': list(chain(self.object.like_chef_id.all(),
                                           Chef.objects.filter(chef_id=self.request.user.id).all()))}
    # def form_valid(self, form):
    #     update_like_chef = form.save(commit=False)
    #     update_like_chef.modified_by = self.request.user
    #     update_like_chef.save()
    #     form.save_m2m()
    #     return super(NewLikeView, self).form_valid(form)
    def get_success_url(self):    # todo surely there's a (better) way to have success_url = previous page?
        if self.request.GET.get('next'):
            if (str(self.request.GET.get('next'))=="0"):    # <- HM MAYBE this is incorrect way to do it?
                return '/cooklog/'
            else:
                return '/cooklog/chef/feed/' + str(self.request.GET.get('next')) + '/'
        else:
            return '/cooklog/dish/' + str(self.object.dish_id) + '/'


class NewRecipeCategoryView(CreateView):
    model = RecipeCategory
    template_name = 'new_recipe_category_form.html'
    fields = ['recipecategory_name', 'date_created']
    def get_queryset(self):
        return RecipeCategory.objects.filter(recipecategory_id=self.kwargs.get("pk", None))
    def get_success_url(self):
        return '/cooklog/recipecategories/'

class NewBugView(CreateView):
    model = Bugs
    template_name = 'new_bug_form.html'
    fields = ['bug_comment']
    def get_initial(self):
        return {'user_id' : self.request.user.id }
    def get_queryset(self):
        return Bugs.objects.filter(bug_id=self.kwargs.get("pk", None))
    def get_success_url(self):
        return '/cooklog/'


class NewEntryView(TemplateView):
    template_name = 'new_entry.html'

class NewEntryDoneView(TemplateView):
    template_name = 'new_entry_done.html'

class NewEntryTodoView(TemplateView):
    template_name = 'new_entry_todo.html'